{"version":3,"sources":["../math/math.ts","../Clock.ts","../math/Vector.ts","../common.ts","../Input.ts","../math/Matrix.ts","../graphics/Drawing.ts","../math/SupportFunctions.ts","polygonSeparation.ts"],"names":[],"mappings":"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","file":"polygonSeparation.45068397.js","sourceRoot":"..\\src\\demos","sourcesContent":["import Vector from \"./Vector\"\r\n\r\nconst epsilon = 0.00001\r\n\r\nexport function equals( a: number, b: number ) {\r\n    return Math.abs( a - b ) < epsilon\r\n}\r\n\r\nexport function randomFloor( upperLimit: number ) {\r\n    return Math.floor( Math.random() * upperLimit )\r\n}\r\n\r\nexport function contains( min: number, max: number, x: number ) {\r\n    return x >= min && x <= max\r\n}\r\n\r\nexport function contains2D( pos: Vector, width: number, height: number, pt: Vector ) {\r\n    return contains( pos.x, pos.x + width, pt.x ) && contains( pos.y, pos.y + height, pt.y )\r\n}\r\n\r\nexport function clamp( min: number, max: number, x: number ) {\r\n    return ( x < min ) ? min : ( ( x > max ) ? max : x )\r\n}\r\n\r\nexport function threshold( x: number, cutoff: number ) {\r\n    return Math.abs( x ) < cutoff ? 0 : x\r\n}\r\n\r\nexport function lerp( start: number, end: number, alpha: number ) {\r\n    return ( end - start ) * alpha + start\r\n}\r\n\r\nexport function remap( min1: number, max1: number, min2: number, max2: number, x ) {\r\n    let alpha = ( x - min1 ) / ( max1 - min1 )\r\n    return lerp( min2, max2, alpha )\r\n}\r\n\r\nexport function modulus( quotient: number, divisor: number ) {\r\n    return ( ( quotient % divisor ) + divisor ) % divisor\r\n}","import { lerp } from \"./math/math\"\r\n\r\nexport default class Clock {\r\n    lastFrame: number\r\n    averageFPS: number\r\n    constructor() {\r\n        this.lastFrame = performance.now()\r\n        this.averageFPS = 0\r\n    }\r\n    nextFrame() {\r\n        let now = performance.now()\r\n        let dt = now - this.lastFrame\r\n        this.lastFrame = now\r\n\r\n        if ( dt != 0 ) {\r\n            let FPS = 1000 / dt\r\n            this.averageFPS = lerp( this.averageFPS, FPS, 0.04 )\r\n        }\r\n\r\n        return dt\r\n    }\r\n}","import { clamp, equals } from \"./math\"\r\n\r\nexport default class Vector {\r\n    x: number\r\n    y: number\r\n    static zero = new Vector( 0, 0 )\r\n    static one = new Vector( 1, 1 )\r\n    static right = new Vector( 1, 0 )\r\n    static down = new Vector( 0, 1 )\r\n    constructor( x, y ) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n    length() { return Math.sqrt( this.x ** 2 + this.y ** 2 ) }\r\n    lengthSquared() { return this.x * this.x + this.y * this.y }\r\n    angle() { return Math.atan2( this.y, this.x ) }\r\n\r\n    equivalent( other: Vector ) { return equals( this.x, other.x ) && equals( this.y, other.y ) }\r\n\r\n    unit() { return this.scale( 1 / Math.max( this.length(), 1e-10 ) ) }\r\n    leftNormal() { return new Vector( -this.y, this.x ) }\r\n    rightNormal() { return new Vector( this.y, -this.x ) }\r\n    negate() { return new Vector( -this.x, -this.y ) }\r\n    half() { return new Vector( this.x * 0.5, this.y * 0.5 ) }\r\n    copy() { return new Vector( this.x, this.y ) }\r\n\r\n    floor( scale = 1 ) { return new Vector( Math.floor( this.x / scale ) * scale, Math.floor( this.y / scale ) * scale ) }\r\n\r\n    add( other: Vector ) { return new Vector( this.x + other.x, this.y + other.y ) }\r\n    addXY( x: number, y: number ) { return new Vector( this.x + x, this.y + y ) }\r\n    addX( x: number ) { return new Vector( this.x + x, this.y ) }\r\n    addY( y: number ) { return new Vector( this.x, this.y + y ) }\r\n    subtract( other: Vector ) { return new Vector( this.x - other.x, this.y - other.y ) }\r\n    dot( other: Vector ) { return this.x * other.x + this.y * other.y }\r\n    cross( other: Vector ) { return this.x * other.y - this.y * other.x }\r\n    crossZLeft( z: number ) { return new Vector( - this.y * z, this.x * z ) }\r\n    crossZRight( z: number ) { return new Vector( this.y * z, - this.x * z ) }\r\n    scale( scale: number ) { return new Vector( this.x * scale, this.y * scale ) }\r\n    stretch( x: number, y: number ) { return new Vector( this.x * x, this.y * y ) }\r\n    divide( divisor: number ) { return new Vector( this.x / divisor, this.y / divisor ) }\r\n    lerp( other: Vector, t: number ) { return this.scale( 1 - t ).add( other.scale( t ) ) }\r\n\r\n    clampAlongAxis( axis: Vector, min, max ) {\r\n        let projection = this.dot( axis )\r\n        let clampedProjection = clamp( min, max, projection )\r\n        let diff = clampedProjection - projection\r\n        return this.add( axis.scale( diff ) )\r\n    }\r\n\r\n    distance( other: Vector ) { return Math.sqrt( ( this.x - other.x ) ** 2 + ( this.y - other.y ) ** 2 ) }\r\n    distanceSq( other: Vector ) { return ( this.x - other.x ) ** 2 + ( this.y - other.y ) ** 2 }\r\n\r\n    rotated( angle: number ) {\r\n        return this.complexProduct( Vector.polar( angle, 1 ) )\r\n    }\r\n\r\n    isRightOf( other: Vector ) {\r\n        return this.cross( other ) > 0\r\n    }\r\n\r\n    normalOnSide( side: Vector ) {\r\n        if ( side.isRightOf( this ) )\r\n            return this.rightNormal()\r\n        return this.leftNormal()\r\n    }\r\n\r\n    complexProduct( other: Vector ) {\r\n        let x = this.x * other.x - this.y * other.y\r\n        let y = this.x * other.y + this.y * other.x\r\n        return new Vector( x, y )\r\n    }\r\n\r\n    complexQuotient( other: Vector ) {\r\n        let lengthSquared = other.lengthSquared()\r\n        let x = this.x * other.x + this.y * other.y\r\n        let y = this.y * other.x - this.x * other.y\r\n        return new Vector( x / lengthSquared, y / lengthSquared )\r\n    }\r\n\r\n    complexExponential() {\r\n        let magnitude = Math.exp( this.x )\r\n        return new Vector( magnitude * Math.cos( this.y ), magnitude * Math.sin( this.y ) )\r\n    }\r\n\r\n    projection( other: Vector ) {\r\n        return other.scale( other.dot( this ) / other.lengthSquared() )\r\n    }\r\n\r\n    projectToLine( normal: Vector, distance: number ) {\r\n        let heightAboveLine = this.dot( normal ) - distance\r\n        return this.subtract( normal.scale( heightAboveLine ) )\r\n    }\r\n\r\n    static polar( angle, length ) {\r\n        return new Vector( Math.cos( angle ) * length, Math.sin( angle ) * length )\r\n    }\r\n\r\n    // Allocation free operations for hotcode\r\n    set( x: number, y: number ) { this.x = x; this.y = y; return this }\r\n    hot_add( other: Vector, target: Vector ) { return target.set( this.x + other.x, this.y + other.y ) }\r\n    hot_subtract( other: Vector, target: Vector ) { return target.set( this.x - other.x, this.y - other.y ) }\r\n    hot_crossZLeft( z: number, target: Vector ) { return target.set( - this.y * z, this.x * z ) }\r\n    hot_crossZRight( z: number, target: Vector ) { return target.set( this.y * z, - this.x * z ) }\r\n    hot_scale( scale: number, target: Vector ) { return target.set( this.x * scale, this.y * scale ) }\r\n    hot_leftNormal( target: Vector ) { return target.set( -this.y, this.x ) }\r\n    hot_rightNormal( target: Vector ) { return target.set( this.y, -this.x ) }\r\n    hot_unit( target: Vector ) { let scale = 1 / this.length(); return target.set( this.x * scale, this.y * scale ) }\r\n}","import { modulus } from \"./math/math\"\r\nimport { SupportFunction } from \"./math/SupportFunctions\"\r\nimport Vector from \"./math/Vector\"\r\n\r\nexport const notQuiteInfiniteMass = 1e+32\r\n\r\nexport function sampleSupport( n, support: SupportFunction ) {\r\n    let result: Vector[] = []\r\n    for ( let i = 0; i < n; i++ ) {\r\n        let theta = Math.PI * 2 * i / n\r\n        result.push( support( Vector.polar( theta, 1 ) ) )\r\n    }\r\n    return result\r\n}\r\n\r\nexport function polygon( n, radius ) {\r\n    let result: Vector[] = []\r\n    for ( let i = 0; i < n; i++ )\r\n        result.push( new Vector(\r\n            Math.cos( Math.PI * 2 / n * i ) * radius,\r\n            Math.sin( Math.PI * 2 / n * i ) * radius\r\n        ) )\r\n    return result\r\n}\r\n\r\nexport function boxPolygon( width, height ) {\r\n    let rx = width / 2\r\n    let ry = height / 2\r\n    return [\r\n        new Vector( -rx, -ry ),\r\n        new Vector( rx, -ry ),\r\n        new Vector( rx, ry ),\r\n        new Vector( -rx, ry ),\r\n    ]\r\n}\r\n\r\nexport function initCanvas() {\r\n    let canvas = document.getElementById( \"mainCanvas\" ) as HTMLCanvasElement\r\n    updateCanvasResolution()\r\n    window.addEventListener( \"resize\", ev => updateCanvasResolution() )\r\n    function updateCanvasResolution() {\r\n        let rect = canvas.getBoundingClientRect()\r\n        canvas.width = rect.width\r\n        canvas.height = rect.height\r\n    }\r\n    return canvas\r\n}","import Vector from \"./math/Vector\"\r\n\r\nexport default class Input {\r\n    keys: Map<string, boolean>\r\n    mouse: Map<number, boolean>\r\n    cursor: Vector\r\n    constructor() {\r\n        this.keys = new Map()\r\n        this.mouse = new Map()\r\n        this.cursor = new Vector( 0, 0 )\r\n        this.watchCursor()\r\n        this.watchMouse()\r\n        this.watchKeys()\r\n    }\r\n    watchKeys() {\r\n        console.log( \"starting key watch\" )\r\n        window.addEventListener( \"keydown\", ( e ) => this.keys.set( e.key.toLowerCase(), true ) )\r\n        window.addEventListener( \"keyup\", ( e ) => this.keys.set( e.key.toLowerCase(), false ) )\r\n    }\r\n    watchMouse() {\r\n        console.log( \"starting mouse watch\" )\r\n        window.addEventListener( \"mousedown\", ( e ) => this.mouse.set( e.button, true ) )\r\n        window.addEventListener( \"mouseup\", ( e ) => this.mouse.set( e.button, false ) )\r\n    }\r\n    watchCursor() {\r\n        console.log( \"starting cursor watch\" )\r\n        window.addEventListener( \"mousemove\", ( e ) => this.cursor = new Vector( e.x, e.y ) )\r\n    }\r\n}","import Vector from \"./Vector\"\r\n\r\nconst epsilon = 0.000001\r\n\r\nexport default class Matrix {\r\n    readonly m11 = 0; readonly m12 = 0; readonly m13 = 0\r\n    readonly m21 = 0; readonly m22 = 0; readonly m23 = 0\r\n    readonly m31 = 0; readonly m32 = 0; readonly m33 = 0\r\n\r\n    static identity = new Matrix(\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1\r\n    )\r\n\r\n    constructor(\r\n        m11, m12, m13,\r\n        m21, m22, m23,\r\n        m31, m32, m33\r\n    ) {\r\n        this.m11 = m11; this.m12 = m12; this.m13 = m13\r\n        this.m21 = m21; this.m22 = m22; this.m23 = m23\r\n        this.m31 = m31; this.m32 = m32; this.m33 = m33\r\n    }\r\n\r\n    multiply( other: Matrix ): Matrix { return multiplyMatrix( this, other, Matrix ) }\r\n    inverse(): Matrix { return inverse( this, Matrix ) }\r\n    determinant(): number { return determinant( this, Matrix ) }\r\n    equals( other: Matrix ): boolean { return equals( this, other, epsilon, Matrix ) }\r\n\r\n    multiplyVec( v: Vector, z: number = 1, target = new Vector( 0, 0 ) ) {\r\n        let {\r\n            m11, m12, m13,\r\n            m21, m22, m23,\r\n        } = this\r\n        let { x, y } = v\r\n        target.x = m11 * x + m12 * y + m13 * z\r\n        target.y = m21 * x + m22 * y + m23 * z\r\n        return target\r\n    }\r\n\r\n    static translation( x = 0, y = 0 ) {\r\n        return new Matrix(\r\n            1, 0, x,\r\n            0, 1, y,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    static vTranslation( v: Vector ) {\r\n        return new Matrix(\r\n            1, 0, v.x,\r\n            0, 1, v.y,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    static rotation( angle = 0 ) {\r\n        let s = Math.sin( angle )\r\n        let c = Math.cos( angle )\r\n        return new Matrix(\r\n            c, -s, 0,\r\n            s, c, 0,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    static scale( x = 1, y = 1 ) {\r\n        return new Matrix(\r\n            x, 0, 0,\r\n            0, y, 0,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    // https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations\r\n    static transformation( preTranslationX, preTranslationY, angle, scaleX, scaleY, translationX, translationY ) {\r\n        let px = preTranslationX, py = preTranslationY\r\n        let a = angle\r\n        let sx = scaleX\r\n        let sy = scaleY\r\n        let x = translationX\r\n        let y = translationY\r\n        let s = Math.sin( a ), c = Math.cos( a )\r\n        return new Matrix(\r\n            sx * c, -sy * s, px * sx * c - py * sy * s + x,\r\n            sx * s, sy * c, px * sx * s + py * sy * c + y,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    static scaleAndTranslate( scale, translationX, translationY ) {\r\n        let s = scale\r\n        let x = translationX\r\n        let y = translationY\r\n        return new Matrix(\r\n            s, 0, x,\r\n            0, s, y,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    print() {\r\n        let {\r\n            m11, m12, m13,\r\n            m21, m22, m23,\r\n            m31, m32, m33,\r\n        } = this\r\n        let rows = [\r\n            [ m11, m12, m13 ],\r\n            [ m21, m22, m23 ],\r\n            [ m31, m32, m33 ],\r\n        ]\r\n        let columnWidths = [\r\n            [ m11, m21, m31 ],\r\n            [ m12, m22, m32 ],\r\n            [ m13, m23, m33 ],\r\n        ].map(\r\n            column =>\r\n                column.map(\r\n                    e => e.toString().length\r\n                ).reduce(\r\n                    ( a, b ) => Math.max( a, b )\r\n                )\r\n        )\r\n        let pad = ( n: number, column: number ) => n.toString().padStart( columnWidths[ column ] )\r\n        let result = rows.map(\r\n            row => \"| \" + row.map( pad ).join( \"  \" ) + \" |\"\r\n        ).join( \"\\n\" )\r\n        console.log( result )\r\n    }\r\n\r\n}\r\n\r\n// Code generation:\r\n\r\n// function* rangeGen( n ) { for ( let i = 1; i <= n; i++ ) yield i }\r\n// function range( n ) { return Array.from( rangeGen( n ) ) }\r\nfunction range( n ) {\r\n    let res = [] as number[]\r\n    for ( let i = 1; i <= n; i++ ) res.push( i )\r\n    return res\r\n}\r\n\r\nfunction determinant2(\r\n    a11, a12,\r\n    a21, a22\r\n) {\r\n    return \"( \" + a11 + \" * \" + a22 + \" - \" + a12 + \" * \" + a21 + \" )\"\r\n}\r\n\r\nfunction determinant3( args: string[] ) {\r\n    let [\r\n        a11, a12, a13,\r\n        a21, a22, a23,\r\n        a31, a32, a33\r\n    ] = args\r\n    return `(${ a11 } * ${ determinant2( a22, a23, a32, a33 ) } -\r\n    ${ a12 } * ${ determinant2( a21, a23, a31, a33 ) } +\r\n    ${ a13 } * ${ determinant2( a21, a22, a31, a32 ) })`\r\n}\r\n\r\nfunction destructureMatrix( name: string ) {\r\n    let destructureArgs = range( 3 ).map(\r\n        j => range( 3 ).map(\r\n            i => \"m\" + j + i + \": \" + name + j + i\r\n        ).join( \", \" )\r\n    ).join( \",\\n    \" )\r\n    return \"let {\\n    \" + destructureArgs + \"\\n} = \" + name\r\n}\r\n\r\nconst determinant = ( () => {\r\n    let args = range( 3 ).map( ( j ) => range( 3 ).map( ( i ) => \"A.m\" + j + i ) ).flat()\r\n    let body = \"return \" + determinant3( args )\r\n    return new Function( \"A\", \"Matrix3\", body )\r\n} )()\r\n\r\nconst multiplyMatrix = ( () => {\r\n    let destructureA = destructureMatrix( \"A\" )\r\n    let destructureB = destructureMatrix( \"B\" )\r\n    let matrixArgs = range( 3 ).map(\r\n        j => range( 3 ).map(\r\n            i => range( 3 ).map(\r\n                k => \"A\" + j + k + \" * B\" + k + i\r\n            ).join( \" + \" )\r\n        ).join( \", \" )\r\n    ).join( \",\\n    \" )\r\n    let body = [\r\n        destructureA,\r\n        destructureB,\r\n        `return new Matrix3(\\n    ${ matrixArgs }\\n)`\r\n    ].join( \"\\n\" )\r\n    return new Function( \"A\", \"B\", \"Matrix3\", body )\r\n} )()\r\n\r\n// https://en.wikipedia.org/wiki/Cramer%27s_rule#Finding_inverse_matrix\r\n// https://en.wikipedia.org/wiki/Adjugate_matrix#3_%C3%97_3_generic_matrix\r\nconst inverse = ( () => {\r\n    let destructure = destructureMatrix( \"A\" )\r\n\r\n    let detArgs = range( 3 ).map( ( j ) => range( 3 ).map( ( i ) => \"A\" + j + i ) ).flat()\r\n    let coefStatemnent = \"let c = 1 / \" + determinant3( detArgs )\r\n\r\n    let det2 = ( a, b, c, d ) => determinant2( \"A\" + a, \"A\" + b, \"A\" + c, \"A\" + d )\r\n    // Adjugate matrix:\r\n    let b11 = det2( 22, 23, 32, 33 ), b12 = \"-\" + det2( 12, 13, 32, 33 ), b13 = det2( 12, 13, 22, 23 )\r\n    let b21 = \"-\" + det2( 21, 23, 31, 33 ), b22 = det2( 11, 13, 31, 33 ), b23 = \"-\" + det2( 11, 13, 21, 23 )\r\n    let b31 = det2( 21, 22, 31, 32 ), b32 = \"-\" + det2( 11, 12, 31, 32 ), b33 = det2( 11, 12, 21, 22 )\r\n\r\n    let matrixArgs = [\r\n        [ b11, b12, b13 ],\r\n        [ b21, b22, b23 ],\r\n        [ b31, b32, b33 ]\r\n    ].map( row => row.map( e => e + \" * c\" ).join( \", \" ) ).join( \",\\n    \" )\r\n\r\n    let body = [\r\n        destructure,\r\n        coefStatemnent,\r\n        `\\nreturn new Matrix3(${ matrixArgs })`\r\n    ].join( \"\\n\" )\r\n    return new Function( \"A\", \"Matrix3\", body )\r\n} )()\r\n\r\nconst equals = ( () => {\r\n    let destructureA = destructureMatrix( \"A\" )\r\n    let destructureB = destructureMatrix( \"B\" )\r\n    let comparisons = range( 3 ).map(\r\n        j => range( 3 ).map(\r\n            i => {\r\n                let index = j.toString() + i.toString()\r\n                return `if (Math.abs(A${ index } - B${ index }) > epsilon) return false`\r\n            }\r\n        )\r\n    ).flat()\r\n    let body = [\r\n        destructureA,\r\n        destructureB,\r\n        ...comparisons,\r\n        \"return true\"\r\n    ].join( \"\\n\" )\r\n    return new Function( \"A\", \"B\", \"epsilon\", \"Matrix3\", body )\r\n} )()","import { modulus } from \"../math/math\"\r\nimport Vector from \"../math/Vector\"\r\n\r\nexport default class Drawing {\r\n    static context: CanvasRenderingContext2D\r\n    static stroke( color?: string ) {\r\n        if ( color )\r\n            Drawing.context.strokeStyle = color\r\n        Drawing.context.stroke()\r\n        return Drawing\r\n    }\r\n    static fill( color?: string ) {\r\n        if ( color )\r\n            Drawing.context.fillStyle = color\r\n        Drawing.context.fill()\r\n        return Drawing\r\n    }\r\n    static save() {\r\n        Drawing.context.save()\r\n        return Drawing\r\n    }\r\n    static restore() {\r\n        Drawing.context.restore()\r\n        return Drawing\r\n    }\r\n    static vTranslate( v: Vector ) {\r\n        Drawing.context.translate( v.x, v.y )\r\n        return Drawing\r\n    }\r\n    static vLine( a: Vector, b: Vector ) {\r\n        let c = Drawing.context\r\n        c.beginPath()\r\n        c.moveTo( a.x, a.y )\r\n        c.lineTo( b.x, b.y )\r\n        return Drawing\r\n    }\r\n    static line( ax, ay, bx, by ) {\r\n        let c = Drawing.context\r\n        c.beginPath()\r\n        c.moveTo( ax, ay )\r\n        c.lineTo( bx, by )\r\n        return Drawing\r\n    }\r\n    static vCircle( position: Vector, radius: number ) {\r\n        Drawing.context.beginPath()\r\n        Drawing.context.arc( position.x, position.y, radius, 0, Math.PI * 2 )\r\n        return Drawing\r\n    }\r\n    static circle( x, y, radius: number ) {\r\n        Drawing.context.beginPath()\r\n        Drawing.context.arc( x, y, radius, 0, Math.PI * 2 )\r\n        return Drawing\r\n    }\r\n    static vRect( position: Vector, width, height ) {\r\n        Drawing.context.rect( position.x, position.y, width, height )\r\n        return Drawing\r\n    }\r\n    static rect( x, y, width, height ) {\r\n        Drawing.context.rect( x, y, width, height )\r\n        return Drawing\r\n    }\r\n    static polygon( poly: Vector[], padding = 0 ) {\r\n        let c = Drawing.context\r\n        if ( poly.length == 0 )\r\n            return Drawing\r\n        const getPoint = i => {\r\n            if ( padding == 0 )\r\n                return poly[ i ]\r\n            let p0 = poly[ modulus( i - 1, poly.length ) ]\r\n            let p1 = poly[ i ]\r\n            let p2 = poly[ ( i + 1 ) % poly.length ]\r\n            let tangent1 = p1.subtract( p0 ).unit()\r\n            let tangent2 = p2.subtract( p1 ).unit()\r\n            let midNormal = tangent1.lerp( tangent2, .5 ).rightNormal().unit()\r\n            return p1.add( midNormal.scale( padding ) )\r\n        }\r\n        let pt = getPoint( 0 )\r\n        c.beginPath()\r\n        c.moveTo( pt.x, pt.y )\r\n        for ( let i = 1; i < poly.length; i++ ) {\r\n            pt = getPoint( i )\r\n            c.lineTo( pt.x, pt.y )\r\n        }\r\n        c.closePath()\r\n        return Drawing\r\n    }\r\n}","import Matrix from \"./Matrix\"\r\nimport Vector from \"./Vector\"\r\n\r\nexport type SupportFunction = ( v: Vector ) => Vector\r\n\r\nconst SupportFunctions = {\r\n    polygon: ( poly: Vector[] ) => ( axis: Vector ) => {\r\n        let best = poly[ 0 ]\r\n        let bestDist = best.dot( axis )\r\n        for ( let i = 1; i < poly.length; i++ ) {\r\n            let next = poly[ i ]\r\n            let nextDist = next.dot( axis )\r\n            if ( nextDist > bestDist )\r\n                best = next, bestDist = nextDist\r\n        }\r\n        return best\r\n    },\r\n    transform: ( support: SupportFunction, mat: Matrix ) => {\r\n        let invMat = mat.inverse()\r\n        return ( axis: Vector ) => mat.multiplyVec( support( invMat.multiplyVec( axis, 0 ) ) )\r\n    },\r\n    round: ( support: SupportFunction, radius ) => ( axis: Vector ) => support( axis ).add( axis.unit().scale( radius ) ),\r\n    translate: ( support: SupportFunction, v: Vector ) => ( axis: Vector ) => support( axis ).add( v )\r\n}\r\nexport default SupportFunctions","import Clock from \"../Clock\"\r\nimport { boxPolygon, initCanvas, polygon } from \"../common\"\r\nimport Input from \"../Input\"\r\nimport Matrix from \"../math/Matrix\"\r\nimport Vector from \"../math/Vector\"\r\nimport Drawing from \"../graphics/Drawing\"\r\nimport SupportFunctions from \"../math/SupportFunctions\"\r\n\r\nlet canvas = initCanvas()\r\nlet c = canvas.getContext( \"2d\" ) as CanvasRenderingContext2D\r\nlet input = new Input()\r\nlet clock = new Clock()\r\n\r\nconst colorPalette = [ \"#264653\", \"#2A9D8F\", \"#E9C46A\", \"#F4A261\", \"#E76F51\" ]\r\n\r\nlet paused = false\r\nwindow.addEventListener( \"keypress\", ev => { if ( ev.key == \" \" ) paused = !paused } )\r\n\r\nmainLoop()\r\nfunction mainLoop() {\r\n    clock.nextFrame()\r\n    if ( !paused ) {\r\n        render()\r\n        update()\r\n    }\r\n    window.requestAnimationFrame( mainLoop )\r\n}\r\n\r\nfunction render() {\r\n    Drawing.context = c\r\n\r\n    c.fillStyle = \"#ebe6d1\"\r\n    c.fillRect( 0, 0, canvas.width, canvas.height )\r\n\r\n    let orbitCenter = new Vector( canvas.width / 4, canvas.height / 2 )\r\n    let matA\r\n    if ( input.mouse.get( 0 ) ) {\r\n        matA = Matrix.vTranslation( input.cursor )\r\n    } else {\r\n        matA = [\r\n            Matrix.vTranslation( orbitCenter ),\r\n            Matrix.rotation( performance.now() / 1000 ),\r\n            Matrix.translation( 200, 0 ),\r\n            Matrix.rotation( performance.now() / 1100 ),\r\n            // Matrix.scale( 2, 1 )\r\n        ].reduce( ( a, b ) => a.multiply( b ) )\r\n    }\r\n    // let polyA = boxPolygon( 200, 200 ).map( v => matA.multiplyVec( v ) )\r\n    let polyA = polygon( 5, 100 ).map( v => matA.multiplyVec( v ) )\r\n    let matB = Matrix.vTranslation( orbitCenter )\r\n    let polyB = polygon( 5, 100 ).map( v => matB.multiplyVec( v ) )\r\n\r\n    Drawing.polygon( polyA ).fill( colorPalette[ 3 ] )\r\n    Drawing.polygon( polyB ).fill( colorPalette[ 4 ] )\r\n\r\n    drawGraph( polyB, polyA )\r\n\r\n    c.fillStyle = \"red\"\r\n    c.font = \"24px Impact\"\r\n    c.fillText( clock.averageFPS.toFixed( 2 ), 0 + 2, 20 + 2 )\r\n}\r\n\r\nfunction drawGraph( polyA: Vector[], polyB: Vector[] ) {\r\n    let vscale = 1\r\n    let hscale = 100\r\n\r\n    let supportA = SupportFunctions.polygon( polyA )\r\n    let supportB = SupportFunctions.polygon( polyB )\r\n\r\n    let resolution = 1000\r\n    let dTheta = Math.PI * 2 / resolution\r\n\r\n    let distances: number[] = []\r\n    for ( let i = 0; i < resolution; i++ ) {\r\n        let theta = -dTheta * i\r\n        let axis = Vector.polar( theta, 1 )\r\n        let distance = supportB( axis.negate() ).dot( axis ) - supportA( axis ).dot( axis )\r\n        distances.push( distance )\r\n    }\r\n\r\n    let hstride = dTheta * hscale\r\n    let graphWidth = distances.length * hstride\r\n\r\n    c.save()\r\n    c.translate( canvas.width * 3 / 4 - graphWidth / 2, canvas.height / 2 )\r\n    c.scale( 1, -1 )\r\n\r\n    c.lineWidth = 2\r\n    c.strokeStyle = \"#d1ccb6\"\r\n    Drawing.line( 0, 0, graphWidth, 0 ).stroke()\r\n    Drawing.line( graphWidth, -100, graphWidth, 100 ).stroke()\r\n    Drawing.line( 0, -100, 0, 100 ).stroke()\r\n\r\n    c.beginPath()\r\n    c.moveTo( 0, distances[ 0 ] * vscale )\r\n    for ( let i = 1; i < distances.length; i++ )\r\n        c.lineTo( i * hstride, distances[ i ] * vscale )\r\n    c.stroke()\r\n\r\n    c.restore()\r\n}\r\n\r\nfunction update() {\r\n}\r\n"]}
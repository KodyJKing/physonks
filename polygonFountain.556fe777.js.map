{"version":3,"sources":["../math/math.ts","../Clock.ts","../math/Vector.ts","../common.ts","../graphics/Color.ts","../dynamics/Body.ts","../Input.ts","../graphics/Drawing.ts","../math/AABB.ts","../math/Matrix.ts","../collision/PolygonCollider.ts","../collision/CircleCollider.ts","../math/SupportFunctions.ts","../collision/Broadphase.ts","../collision/Collision.ts","../dynamics/solvePositions.ts","../dynamics/solveVelocities.ts","../Engine.ts","polygonFountain.ts"],"names":[],"mappings":"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","file":"polygonFountain.556fe777.js","sourceRoot":"..\\src\\demos","sourcesContent":["import Vector from \"./Vector\"\r\n\r\nconst epsilon = 0.00001\r\n\r\nexport function equals( a: number, b: number ) {\r\n    return Math.abs( a - b ) < epsilon\r\n}\r\n\r\nexport function randomFloor( upperLimit: number ) {\r\n    return Math.floor( Math.random() * upperLimit )\r\n}\r\n\r\nexport function contains( min: number, max: number, x: number ) {\r\n    return x >= min && x <= max\r\n}\r\n\r\nexport function contains2D( pos: Vector, width: number, height: number, pt: Vector ) {\r\n    return contains( pos.x, pos.x + width, pt.x ) && contains( pos.y, pos.y + height, pt.y )\r\n}\r\n\r\nexport function clamp( min: number, max: number, x: number ) {\r\n    return ( x < min ) ? min : ( ( x > max ) ? max : x )\r\n}\r\n\r\nexport function threshold( x: number, cutoff: number ) {\r\n    return Math.abs( x ) < cutoff ? 0 : x\r\n}\r\n\r\nexport function lerp( start: number, end: number, alpha: number ) {\r\n    return ( end - start ) * alpha + start\r\n}\r\n\r\nexport function remap( min1: number, max1: number, min2: number, max2: number, x ) {\r\n    let alpha = ( x - min1 ) / ( max1 - min1 )\r\n    return lerp( min2, max2, alpha )\r\n}\r\n\r\nexport function modulus( quotient: number, divisor: number ) {\r\n    return ( ( quotient % divisor ) + divisor ) % divisor\r\n}","import { lerp } from \"./math/math\"\r\n\r\nexport default class Clock {\r\n    lastFrame: number\r\n    averageFPS: number\r\n    constructor() {\r\n        this.lastFrame = performance.now()\r\n        this.averageFPS = 0\r\n    }\r\n    nextFrame() {\r\n        let now = performance.now()\r\n        let dt = now - this.lastFrame\r\n        this.lastFrame = now\r\n\r\n        if ( dt != 0 ) {\r\n            let FPS = 1000 / dt\r\n            this.averageFPS = lerp( this.averageFPS, FPS, 0.04 )\r\n        }\r\n\r\n        return dt\r\n    }\r\n}","import { clamp, equals } from \"./math\"\r\n\r\nexport default class Vector {\r\n    x: number\r\n    y: number\r\n    static zero = new Vector( 0, 0 )\r\n    static one = new Vector( 1, 1 )\r\n    static right = new Vector( 1, 0 )\r\n    static down = new Vector( 0, 1 )\r\n    constructor( x, y ) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n    length() { return Math.sqrt( this.x ** 2 + this.y ** 2 ) }\r\n    lengthSquared() { return this.x * this.x + this.y * this.y }\r\n    angle() { return Math.atan2( this.y, this.x ) }\r\n\r\n    equivalent( other: Vector ) { return equals( this.x, other.x ) && equals( this.y, other.y ) }\r\n\r\n    unit() { return this.scale( 1 / Math.max( this.length(), 1e-10 ) ) }\r\n    leftNormal() { return new Vector( -this.y, this.x ) }\r\n    rightNormal() { return new Vector( this.y, -this.x ) }\r\n    negate() { return new Vector( -this.x, -this.y ) }\r\n    half() { return new Vector( this.x * 0.5, this.y * 0.5 ) }\r\n    copy() { return new Vector( this.x, this.y ) }\r\n\r\n    floor( scale = 1 ) { return new Vector( Math.floor( this.x / scale ) * scale, Math.floor( this.y / scale ) * scale ) }\r\n\r\n    add( other: Vector ) { return new Vector( this.x + other.x, this.y + other.y ) }\r\n    addXY( x: number, y: number ) { return new Vector( this.x + x, this.y + y ) }\r\n    addX( x: number ) { return new Vector( this.x + x, this.y ) }\r\n    addY( y: number ) { return new Vector( this.x, this.y + y ) }\r\n    subtract( other: Vector ) { return new Vector( this.x - other.x, this.y - other.y ) }\r\n    dot( other: Vector ) { return this.x * other.x + this.y * other.y }\r\n    cross( other: Vector ) { return this.x * other.y - this.y * other.x }\r\n    crossZLeft( z: number ) { return new Vector( - this.y * z, this.x * z ) }\r\n    crossZRight( z: number ) { return new Vector( this.y * z, - this.x * z ) }\r\n    scale( scale: number ) { return new Vector( this.x * scale, this.y * scale ) }\r\n    stretch( x: number, y: number ) { return new Vector( this.x * x, this.y * y ) }\r\n    divide( divisor: number ) { return new Vector( this.x / divisor, this.y / divisor ) }\r\n    lerp( other: Vector, t: number ) { return this.scale( 1 - t ).add( other.scale( t ) ) }\r\n\r\n    clampAlongAxis( axis: Vector, min, max ) {\r\n        let projection = this.dot( axis )\r\n        let clampedProjection = clamp( min, max, projection )\r\n        let diff = clampedProjection - projection\r\n        return this.add( axis.scale( diff ) )\r\n    }\r\n\r\n    distance( other: Vector ) { return Math.sqrt( ( this.x - other.x ) ** 2 + ( this.y - other.y ) ** 2 ) }\r\n    distanceSq( other: Vector ) { return ( this.x - other.x ) ** 2 + ( this.y - other.y ) ** 2 }\r\n\r\n    rotated( angle: number ) {\r\n        return this.complexProduct( Vector.polar( angle, 1 ) )\r\n    }\r\n\r\n    isRightOf( other: Vector ) {\r\n        return this.cross( other ) > 0\r\n    }\r\n\r\n    normalOnSide( side: Vector ) {\r\n        if ( side.isRightOf( this ) )\r\n            return this.rightNormal()\r\n        return this.leftNormal()\r\n    }\r\n\r\n    complexProduct( other: Vector ) {\r\n        let x = this.x * other.x - this.y * other.y\r\n        let y = this.x * other.y + this.y * other.x\r\n        return new Vector( x, y )\r\n    }\r\n\r\n    complexQuotient( other: Vector ) {\r\n        let lengthSquared = other.lengthSquared()\r\n        let x = this.x * other.x + this.y * other.y\r\n        let y = this.y * other.x - this.x * other.y\r\n        return new Vector( x / lengthSquared, y / lengthSquared )\r\n    }\r\n\r\n    complexExponential() {\r\n        let magnitude = Math.exp( this.x )\r\n        return new Vector( magnitude * Math.cos( this.y ), magnitude * Math.sin( this.y ) )\r\n    }\r\n\r\n    projection( other: Vector ) {\r\n        return other.scale( other.dot( this ) / other.lengthSquared() )\r\n    }\r\n\r\n    projectToLine( normal: Vector, distance: number ) {\r\n        let heightAboveLine = this.dot( normal ) - distance\r\n        return this.subtract( normal.scale( heightAboveLine ) )\r\n    }\r\n\r\n    static polar( angle, length ) {\r\n        return new Vector( Math.cos( angle ) * length, Math.sin( angle ) * length )\r\n    }\r\n\r\n    // Allocation free operations for hotcode\r\n    set( x: number, y: number ) { this.x = x; this.y = y; return this }\r\n    hot_add( other: Vector, target: Vector ) { return target.set( this.x + other.x, this.y + other.y ) }\r\n    hot_subtract( other: Vector, target: Vector ) { return target.set( this.x - other.x, this.y - other.y ) }\r\n    hot_crossZLeft( z: number, target: Vector ) { return target.set( - this.y * z, this.x * z ) }\r\n    hot_crossZRight( z: number, target: Vector ) { return target.set( this.y * z, - this.x * z ) }\r\n    hot_scale( scale: number, target: Vector ) { return target.set( this.x * scale, this.y * scale ) }\r\n    hot_leftNormal( target: Vector ) { return target.set( -this.y, this.x ) }\r\n    hot_rightNormal( target: Vector ) { return target.set( this.y, -this.x ) }\r\n    hot_unit( target: Vector ) { let scale = 1 / this.length(); return target.set( this.x * scale, this.y * scale ) }\r\n}","import { modulus } from \"./math/math\"\r\nimport { SupportFunction } from \"./math/SupportFunctions\"\r\nimport Vector from \"./math/Vector\"\r\n\r\nexport const notQuiteInfiniteMass = 1e+32\r\n\r\nexport function sampleSupport( n, support: SupportFunction ) {\r\n    let result: Vector[] = []\r\n    for ( let i = 0; i < n; i++ ) {\r\n        let theta = Math.PI * 2 * i / n\r\n        result.push( support( Vector.polar( theta, 1 ) ) )\r\n    }\r\n    return result\r\n}\r\n\r\nexport function polygon( n, radius ) {\r\n    let result: Vector[] = []\r\n    for ( let i = 0; i < n; i++ )\r\n        result.push( new Vector(\r\n            Math.cos( Math.PI * 2 / n * i ) * radius,\r\n            Math.sin( Math.PI * 2 / n * i ) * radius\r\n        ) )\r\n    return result\r\n}\r\n\r\nexport function boxPolygon( width, height ) {\r\n    let rx = width / 2\r\n    let ry = height / 2\r\n    return [\r\n        new Vector( -rx, -ry ),\r\n        new Vector( rx, -ry ),\r\n        new Vector( rx, ry ),\r\n        new Vector( -rx, ry ),\r\n    ]\r\n}\r\n\r\nexport function initCanvas() {\r\n    let canvas = document.getElementById( \"mainCanvas\" ) as HTMLCanvasElement\r\n    updateCanvasResolution()\r\n    window.addEventListener( \"resize\", ev => updateCanvasResolution() )\r\n    function updateCanvasResolution() {\r\n        let rect = canvas.getBoundingClientRect()\r\n        canvas.width = rect.width\r\n        canvas.height = rect.height\r\n    }\r\n    return canvas\r\n}","import { lerp } from \"../math/math\"\r\n\r\nexport function rgb( r: number, g: number, b: number ) {\r\n    return new Color( r, g, b )\r\n}\r\n\r\nexport function rgba( r: number, g: number, b: number, a: number = 1 ) {\r\n    return new Color( r, g, b, a )\r\n}\r\n\r\nexport default class Color {\r\n    r: number\r\n    g: number\r\n    b: number\r\n    a: number\r\n\r\n    constructor( r: number, g: number, b: number, a: number = 1 ) {\r\n        this.r = r\r\n        this.g = g\r\n        this.b = b\r\n        this.a = a\r\n    }\r\n\r\n    lerp(other: Color, alpha: number) {\r\n        return new Color(\r\n            lerp(this.r, other.r, alpha),\r\n            lerp(this.g, other.g, alpha),\r\n            lerp(this.b, other.b, alpha),\r\n            lerp(this.a, other.a, alpha),\r\n        )\r\n    }\r\n\r\n    static parse( str: string ): Color {\r\n        if ( str[ 0 ] == \"#\" ) {\r\n            // Parse Hex\r\n            let parts = str.match( /[0-9a-f]{2,2}/ig )!.map( x => parseInt( x, 16 ) )\r\n            return new Color( parts[ 0 ], parts[ 1 ], parts[ 2 ], ( parts[ 3 ] || 255 ) / 255 )\r\n        }\r\n\r\n        if ( str.indexOf( \"(\" ) == -1 ) {\r\n            let color = Color[ str ]\r\n            if ( !color ) throw new Error( \"unrecognized color \" + str )\r\n            return color\r\n        }\r\n\r\n        let type = str.match( /\\w+/ )![ 0 ]\r\n        let args = str.match( /\\d+/g )!.map( x => parseFloat( x ) )\r\n\r\n        switch ( type ) {\r\n            case \"rgb\":\r\n                return new Color( args[ 0 ], args[ 1 ], args[ 2 ] )\r\n            case \"rgba\":\r\n                return new Color( args[ 0 ], args[ 1 ], args[ 2 ], args[ 3 ] )\r\n        }\r\n\r\n        throw new Error(\"unrecognized type\")\r\n    }\r\n\r\n    toString() {\r\n        return `rgba(${this.r},${this.g},${this.b},${this.a})`\r\n    }\r\n}\r\n\r\nexport class Colors {\r\n    static aliceblue = Color.parse( \"#f0f8ff\" )\r\n    static antiquewhite = Color.parse( \"#faebd7\" )\r\n    static aqua = Color.parse( \"#00ffff\" )\r\n    static aquamarine = Color.parse( \"#7fffd4\" )\r\n    static azure = Color.parse( \"#f0ffff\" )\r\n    static beige = Color.parse( \"#f5f5dc\" )\r\n    static bisque = Color.parse( \"#ffe4c4\" )\r\n    static black = Color.parse( \"#000000\" )\r\n    static blanchedalmond = Color.parse( \"#ffebcd\" )\r\n    static blue = Color.parse( \"#0000ff\" )\r\n    static blueviolet = Color.parse( \"#8a2be2\" )\r\n    static brown = Color.parse( \"#a52a2a\" )\r\n    static burlywood = Color.parse( \"#deb887\" )\r\n    static cadetblue = Color.parse( \"#5f9ea0\" )\r\n    static chartreuse = Color.parse( \"#7fff00\" )\r\n    static chocolate = Color.parse( \"#d2691e\" )\r\n    static coral = Color.parse( \"#ff7f50\" )\r\n    static cornflowerblue = Color.parse( \"#6495ed\" )\r\n    static cornsilk = Color.parse( \"#fff8dc\" )\r\n    static crimson = Color.parse( \"#dc143c\" )\r\n    static cyan = Color.parse( \"#00ffff\" )\r\n    static darkblue = Color.parse( \"#00008b\" )\r\n    static darkcyan = Color.parse( \"#008b8b\" )\r\n    static darkgoldenrod = Color.parse( \"#b8860b\" )\r\n    static darkgray = Color.parse( \"#a9a9a9\" )\r\n    static darkgreen = Color.parse( \"#006400\" )\r\n    static darkgrey = Color.parse( \"#a9a9a9\" )\r\n    static darkkhaki = Color.parse( \"#bdb76b\" )\r\n    static darkmagenta = Color.parse( \"#8b008b\" )\r\n    static darkolivegreen = Color.parse( \"#556b2f\" )\r\n    static darkorange = Color.parse( \"#ff8c00\" )\r\n    static darkorchid = Color.parse( \"#9932cc\" )\r\n    static darkred = Color.parse( \"#8b0000\" )\r\n    static darksalmon = Color.parse( \"#e9967a\" )\r\n    static darkseagreen = Color.parse( \"#8fbc8f\" )\r\n    static darkslateblue = Color.parse( \"#483d8b\" )\r\n    static darkslategray = Color.parse( \"#2f4f4f\" )\r\n    static darkslategrey = Color.parse( \"#2f4f4f\" )\r\n    static darkturquoise = Color.parse( \"#00ced1\" )\r\n    static darkviolet = Color.parse( \"#9400d3\" )\r\n    static deeppink = Color.parse( \"#ff1493\" )\r\n    static deepskyblue = Color.parse( \"#00bfff\" )\r\n    static dimgray = Color.parse( \"#696969\" )\r\n    static dimgrey = Color.parse( \"#696969\" )\r\n    static dodgerblue = Color.parse( \"#1e90ff\" )\r\n    static firebrick = Color.parse( \"#b22222\" )\r\n    static floralwhite = Color.parse( \"#fffaf0\" )\r\n    static forestgreen = Color.parse( \"#228b22\" )\r\n    static fuchsia = Color.parse( \"#ff00ff\" )\r\n    static gainsboro = Color.parse( \"#dcdcdc\" )\r\n    static ghostwhite = Color.parse( \"#f8f8ff\" )\r\n    static goldenrod = Color.parse( \"#daa520\" )\r\n    static gold = Color.parse( \"#ffd700\" )\r\n    static gray = Color.parse( \"#808080\" )\r\n    static green = Color.parse( \"#008000\" )\r\n    static greenyellow = Color.parse( \"#adff2f\" )\r\n    static grey = Color.parse( \"#808080\" )\r\n    static honeydew = Color.parse( \"#f0fff0\" )\r\n    static hotpink = Color.parse( \"#ff69b4\" )\r\n    static indianred = Color.parse( \"#cd5c5c\" )\r\n    static indigo = Color.parse( \"#4b0082\" )\r\n    static ivory = Color.parse( \"#fffff0\" )\r\n    static khaki = Color.parse( \"#f0e68c\" )\r\n    static lavenderblush = Color.parse( \"#fff0f5\" )\r\n    static lavender = Color.parse( \"#e6e6fa\" )\r\n    static lawngreen = Color.parse( \"#7cfc00\" )\r\n    static lemonchiffon = Color.parse( \"#fffacd\" )\r\n    static lightblue = Color.parse( \"#add8e6\" )\r\n    static lightcoral = Color.parse( \"#f08080\" )\r\n    static lightcyan = Color.parse( \"#e0ffff\" )\r\n    static lightgoldenrodyellow = Color.parse( \"#fafad2\" )\r\n    static lightgray = Color.parse( \"#d3d3d3\" )\r\n    static lightgreen = Color.parse( \"#90ee90\" )\r\n    static lightgrey = Color.parse( \"#d3d3d3\" )\r\n    static lightpink = Color.parse( \"#ffb6c1\" )\r\n    static lightsalmon = Color.parse( \"#ffa07a\" )\r\n    static lightseagreen = Color.parse( \"#20b2aa\" )\r\n    static lightskyblue = Color.parse( \"#87cefa\" )\r\n    static lightslategray = Color.parse( \"#778899\" )\r\n    static lightslategrey = Color.parse( \"#778899\" )\r\n    static lightsteelblue = Color.parse( \"#b0c4de\" )\r\n    static lightyellow = Color.parse( \"#ffffe0\" )\r\n    static lime = Color.parse( \"#00ff00\" )\r\n    static limegreen = Color.parse( \"#32cd32\" )\r\n    static linen = Color.parse( \"#faf0e6\" )\r\n    static magenta = Color.parse( \"#ff00ff\" )\r\n    static maroon = Color.parse( \"#800000\" )\r\n    static mediumaquamarine = Color.parse( \"#66cdaa\" )\r\n    static mediumblue = Color.parse( \"#0000cd\" )\r\n    static mediumorchid = Color.parse( \"#ba55d3\" )\r\n    static mediumpurple = Color.parse( \"#9370db\" )\r\n    static mediumseagreen = Color.parse( \"#3cb371\" )\r\n    static mediumslateblue = Color.parse( \"#7b68ee\" )\r\n    static mediumspringgreen = Color.parse( \"#00fa9a\" )\r\n    static mediumturquoise = Color.parse( \"#48d1cc\" )\r\n    static mediumvioletred = Color.parse( \"#c71585\" )\r\n    static midnightblue = Color.parse( \"#191970\" )\r\n    static mintcream = Color.parse( \"#f5fffa\" )\r\n    static mistyrose = Color.parse( \"#ffe4e1\" )\r\n    static moccasin = Color.parse( \"#ffe4b5\" )\r\n    static navajowhite = Color.parse( \"#ffdead\" )\r\n    static navy = Color.parse( \"#000080\" )\r\n    static oldlace = Color.parse( \"#fdf5e6\" )\r\n    static olive = Color.parse( \"#808000\" )\r\n    static olivedrab = Color.parse( \"#6b8e23\" )\r\n    static orange = Color.parse( \"#ffa500\" )\r\n    static orangered = Color.parse( \"#ff4500\" )\r\n    static orchid = Color.parse( \"#da70d6\" )\r\n    static palegoldenrod = Color.parse( \"#eee8aa\" )\r\n    static palegreen = Color.parse( \"#98fb98\" )\r\n    static paleturquoise = Color.parse( \"#afeeee\" )\r\n    static palevioletred = Color.parse( \"#db7093\" )\r\n    static papayawhip = Color.parse( \"#ffefd5\" )\r\n    static peachpuff = Color.parse( \"#ffdab9\" )\r\n    static peru = Color.parse( \"#cd853f\" )\r\n    static pink = Color.parse( \"#ffc0cb\" )\r\n    static plum = Color.parse( \"#dda0dd\" )\r\n    static powderblue = Color.parse( \"#b0e0e6\" )\r\n    static purple = Color.parse( \"#800080\" )\r\n    static rebeccapurple = Color.parse( \"#663399\" )\r\n    static red = Color.parse( \"#ff0000\" )\r\n    static rosybrown = Color.parse( \"#bc8f8f\" )\r\n    static royalblue = Color.parse( \"#4169e1\" )\r\n    static saddlebrown = Color.parse( \"#8b4513\" )\r\n    static salmon = Color.parse( \"#fa8072\" )\r\n    static sandybrown = Color.parse( \"#f4a460\" )\r\n    static seagreen = Color.parse( \"#2e8b57\" )\r\n    static seashell = Color.parse( \"#fff5ee\" )\r\n    static sienna = Color.parse( \"#a0522d\" )\r\n    static silver = Color.parse( \"#c0c0c0\" )\r\n    static skyblue = Color.parse( \"#87ceeb\" )\r\n    static slateblue = Color.parse( \"#6a5acd\" )\r\n    static slategray = Color.parse( \"#708090\" )\r\n    static slategrey = Color.parse( \"#708090\" )\r\n    static snow = Color.parse( \"#fffafa\" )\r\n    static springgreen = Color.parse( \"#00ff7f\" )\r\n    static steelblue = Color.parse( \"#4682b4\" )\r\n    static tan = Color.parse( \"#d2b48c\" )\r\n    static teal = Color.parse( \"#008080\" )\r\n    static thistle = Color.parse( \"#d8bfd8\" )\r\n    static tomato = Color.parse( \"#ff6347\" )\r\n    static turquoise = Color.parse( \"#40e0d0\" )\r\n    static violet = Color.parse( \"#ee82ee\" )\r\n    static wheat = Color.parse( \"#f5deb3\" )\r\n    static white = Color.parse( \"#ffffff\" )\r\n    static whitesmoke = Color.parse( \"#f5f5f5\" )\r\n    static yellow = Color.parse( \"#ffff00\" )\r\n    static yellowgreen = Color.parse( \"#9acd32\" )\r\n    static transparent = rgba( 0, 0, 0, 0 )\r\n}","import ICollider from \"../collision/ICollider\"\r\nimport { notQuiteInfiniteMass } from \"../common\"\r\nimport Color, { Colors } from \"../graphics/Color\"\r\nimport AABB from \"../math/AABB\"\r\nimport { threshold } from \"../math/math\"\r\nimport Matrix from \"../math/Matrix\"\r\nimport Vector from \"../math/Vector\"\r\n\r\nexport default class Body {\r\n    collider: ICollider\r\n    position: Vector\r\n    velocity: Vector\r\n    angle: number\r\n    angularVelocity: number\r\n    mass: number; invMass: number\r\n    inertia: number; invInertia: number\r\n    isStatic: boolean\r\n    color: string; outlineColor: string\r\n    id: number\r\n    positionalCorrection: Vector\r\n    static idCounter = 0\r\n    constructor( args: {\r\n        collider: ICollider,\r\n        position: Vector, velocity?: Vector,\r\n        angle?: number, angularVelocity?: number\r\n        mass?: number, inertia?: number,\r\n        isStatic?: boolean,\r\n        color?: string\r\n    } ) {\r\n        this.position = args.position\r\n        this.velocity = args.velocity ?? new Vector( 0, 0 )\r\n        this.angle = args.angle ?? 0\r\n        this.angularVelocity = args.angularVelocity ?? 0\r\n        this.collider = args.collider; this.collider.body = this; this.collider.onUpdatePosition()\r\n        this.isStatic = args.isStatic ?? false\r\n        this.mass = this.isStatic ? notQuiteInfiniteMass : ( args.mass ?? 1 )\r\n        this.invMass = 1 / this.mass\r\n        this.inertia = this.isStatic ? notQuiteInfiniteMass : ( args.inertia ?? 1 )\r\n        this.invInertia = 1 / this.inertia\r\n        this.color = args.color ?? \"grey\"\r\n        this.outlineColor = Color.parse( this.color ).lerp( Colors.black, .05 ).toString()\r\n        this.id = Body.idCounter++\r\n        this.positionalCorrection = new Vector( 0, 0 )\r\n    }\r\n\r\n    getBounds() {\r\n        return this.collider.bounds\r\n    }\r\n\r\n    healthCheck() {\r\n        let { x, y } = this.position\r\n        if ( isNaN( x ) || isNaN( y ) )\r\n            throw new Error( \"NaN component!\" )\r\n    }\r\n\r\n    updateVelocity( timeStep, gravity, rotationalAirDrag, linearAirDrag ) {\r\n        if ( this.isStatic )\r\n            return\r\n\r\n        this.angularVelocity *= rotationalAirDrag\r\n        this.velocity.x *= linearAirDrag\r\n        this.velocity.y *= linearAirDrag\r\n\r\n        this.velocity.y += gravity * timeStep\r\n\r\n        this.positionalCorrection.x = 0\r\n        this.positionalCorrection.y = 0\r\n    }\r\n\r\n    updatePosition( timeStep, linearMotionThreshold = .1, angularMotionThreshold = .001 ) {\r\n        if ( this.isStatic )\r\n            return\r\n\r\n        let dx = this.velocity.x * timeStep\r\n        let dy = this.velocity.y * timeStep\r\n        let dTheta = this.angularVelocity * timeStep\r\n\r\n        // this.position.x += dx\r\n        // this.position.y += dy\r\n        // this.angle += dTheta\r\n\r\n        this.position.x += threshold( dx, linearMotionThreshold )\r\n        this.position.y += threshold( dy, linearMotionThreshold )\r\n        this.angle += threshold( dTheta, angularMotionThreshold )\r\n\r\n        // this.angle %= Math.PI\r\n        // this.angle = threshold( this.angle, .001 )\r\n\r\n        this.collider.onUpdatePosition()\r\n        this.healthCheck()\r\n    }\r\n}","import Vector from \"./math/Vector\"\r\n\r\nexport default class Input {\r\n    keys: Map<string, boolean>\r\n    mouse: Map<number, boolean>\r\n    cursor: Vector\r\n    constructor() {\r\n        this.keys = new Map()\r\n        this.mouse = new Map()\r\n        this.cursor = new Vector( 0, 0 )\r\n        this.watchCursor()\r\n        this.watchMouse()\r\n        this.watchKeys()\r\n    }\r\n    watchKeys() {\r\n        console.log( \"starting key watch\" )\r\n        window.addEventListener( \"keydown\", ( e ) => this.keys.set( e.key.toLowerCase(), true ) )\r\n        window.addEventListener( \"keyup\", ( e ) => this.keys.set( e.key.toLowerCase(), false ) )\r\n    }\r\n    watchMouse() {\r\n        console.log( \"starting mouse watch\" )\r\n        window.addEventListener( \"mousedown\", ( e ) => this.mouse.set( e.button, true ) )\r\n        window.addEventListener( \"mouseup\", ( e ) => this.mouse.set( e.button, false ) )\r\n    }\r\n    watchCursor() {\r\n        console.log( \"starting cursor watch\" )\r\n        window.addEventListener( \"mousemove\", ( e ) => this.cursor = new Vector( e.x, e.y ) )\r\n    }\r\n}","import { modulus } from \"../math/math\"\r\nimport Vector from \"../math/Vector\"\r\n\r\nexport default class Drawing {\r\n    static context: CanvasRenderingContext2D\r\n    static stroke( color?: string ) {\r\n        if ( color )\r\n            Drawing.context.strokeStyle = color\r\n        Drawing.context.stroke()\r\n        return Drawing\r\n    }\r\n    static fill( color?: string ) {\r\n        if ( color )\r\n            Drawing.context.fillStyle = color\r\n        Drawing.context.fill()\r\n        return Drawing\r\n    }\r\n    static save() {\r\n        Drawing.context.save()\r\n        return Drawing\r\n    }\r\n    static restore() {\r\n        Drawing.context.restore()\r\n        return Drawing\r\n    }\r\n    static vTranslate( v: Vector ) {\r\n        Drawing.context.translate( v.x, v.y )\r\n        return Drawing\r\n    }\r\n    static vLine( a: Vector, b: Vector ) {\r\n        let c = Drawing.context\r\n        c.beginPath()\r\n        c.moveTo( a.x, a.y )\r\n        c.lineTo( b.x, b.y )\r\n        return Drawing\r\n    }\r\n    static line( ax, ay, bx, by ) {\r\n        let c = Drawing.context\r\n        c.beginPath()\r\n        c.moveTo( ax, ay )\r\n        c.lineTo( bx, by )\r\n        return Drawing\r\n    }\r\n    static vCircle( position: Vector, radius: number ) {\r\n        Drawing.context.beginPath()\r\n        Drawing.context.arc( position.x, position.y, radius, 0, Math.PI * 2 )\r\n        return Drawing\r\n    }\r\n    static circle( x, y, radius: number ) {\r\n        Drawing.context.beginPath()\r\n        Drawing.context.arc( x, y, radius, 0, Math.PI * 2 )\r\n        return Drawing\r\n    }\r\n    static vRect( position: Vector, width, height ) {\r\n        Drawing.context.rect( position.x, position.y, width, height )\r\n        return Drawing\r\n    }\r\n    static rect( x, y, width, height ) {\r\n        Drawing.context.rect( x, y, width, height )\r\n        return Drawing\r\n    }\r\n    static polygon( poly: Vector[], padding = 0 ) {\r\n        let c = Drawing.context\r\n        if ( poly.length == 0 )\r\n            return Drawing\r\n        const getPoint = i => {\r\n            if ( padding == 0 )\r\n                return poly[ i ]\r\n            let p0 = poly[ modulus( i - 1, poly.length ) ]\r\n            let p1 = poly[ i ]\r\n            let p2 = poly[ ( i + 1 ) % poly.length ]\r\n            let tangent1 = p1.subtract( p0 ).unit()\r\n            let tangent2 = p2.subtract( p1 ).unit()\r\n            let midNormal = tangent1.lerp( tangent2, .5 ).rightNormal().unit()\r\n            return p1.add( midNormal.scale( padding ) )\r\n        }\r\n        let pt = getPoint( 0 )\r\n        c.beginPath()\r\n        c.moveTo( pt.x, pt.y )\r\n        for ( let i = 1; i < poly.length; i++ ) {\r\n            pt = getPoint( i )\r\n            c.lineTo( pt.x, pt.y )\r\n        }\r\n        c.closePath()\r\n        return Drawing\r\n    }\r\n}","import { contains } from \"./math\"\r\nimport Vector from \"./Vector\"\r\n\r\nexport default class AABB {\r\n    minx: number\r\n    miny: number\r\n    maxx: number\r\n    maxy: number\r\n\r\n    constructor( minx: number, miny: number, maxx: number, maxy: number ) {\r\n        this.minx = minx\r\n        this.miny = miny\r\n        this.maxx = maxx\r\n        this.maxy = maxy\r\n    }\r\n\r\n    static fromDimensions( pos: Vector, dimensions: Vector ) {\r\n        return new AABB( pos.x, pos.y, pos.x + dimensions.x, pos.y + dimensions.y )\r\n    }\r\n\r\n    width() { return this.maxx - this.minx }\r\n    height() { return this.maxy - this.miny }\r\n\r\n    hull( a: AABB, b: AABB ) {\r\n        function min( x, y ) { return Math.min( x, y ) }\r\n        function max( x, y ) { return Math.max( x, y ) }\r\n        return new AABB(\r\n            min( a.minx, b.minx ),\r\n            min( a.miny, b.miny ),\r\n            max( a.maxx, b.maxx ),\r\n            max( a.maxy, b.maxy )\r\n        )\r\n    }\r\n\r\n    overlaps( other: AABB ) {\r\n        let a = this, b = other\r\n        return a.minx <= b.maxx && a.maxx >= b.minx &&\r\n            a.miny <= b.maxy && a.maxy >= b.miny\r\n    }\r\n\r\n    addPoint( p: Vector ) {\r\n        this.minx = Math.min( this.minx, p.x )\r\n        this.miny = Math.min( this.miny, p.y )\r\n        this.maxx = Math.max( this.maxx, p.x )\r\n        this.maxy = Math.max( this.maxy, p.y )\r\n    }\r\n\r\n    addAABB( other: AABB ) {\r\n        let a = this, b = other\r\n        a.minx = Math.min( a.minx, b.minx )\r\n        a.miny = Math.min( a.miny, b.miny )\r\n        a.maxx = Math.max( a.maxx, b.maxx )\r\n        a.maxy = Math.max( a.maxy, b.maxy )\r\n    }\r\n\r\n    static empty() {\r\n        return new AABB( Infinity, Infinity, -Infinity, -Infinity )\r\n    }\r\n\r\n    static polygonBounds( poly: Vector[] ) {\r\n        let result = AABB.empty()\r\n        for ( let p of poly )\r\n            result.addPoint( p )\r\n        return result\r\n    }\r\n\r\n    contains( p: Vector ) {\r\n        let { minx, miny, maxx, maxy } = this\r\n        return p.x >= minx && p.x <= maxx && p.y >= miny && p.y <= maxy\r\n    }\r\n}\r\n","import Vector from \"./Vector\"\r\n\r\nconst epsilon = 0.000001\r\n\r\nexport default class Matrix {\r\n    readonly m11 = 0; readonly m12 = 0; readonly m13 = 0\r\n    readonly m21 = 0; readonly m22 = 0; readonly m23 = 0\r\n    readonly m31 = 0; readonly m32 = 0; readonly m33 = 0\r\n\r\n    static identity = new Matrix(\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1\r\n    )\r\n\r\n    constructor(\r\n        m11, m12, m13,\r\n        m21, m22, m23,\r\n        m31, m32, m33\r\n    ) {\r\n        this.m11 = m11; this.m12 = m12; this.m13 = m13\r\n        this.m21 = m21; this.m22 = m22; this.m23 = m23\r\n        this.m31 = m31; this.m32 = m32; this.m33 = m33\r\n    }\r\n\r\n    multiply( other: Matrix ): Matrix { return multiplyMatrix( this, other, Matrix ) }\r\n    inverse(): Matrix { return inverse( this, Matrix ) }\r\n    determinant(): number { return determinant( this, Matrix ) }\r\n    equals( other: Matrix ): boolean { return equals( this, other, epsilon, Matrix ) }\r\n\r\n    multiplyVec( v: Vector, z: number = 1, target = new Vector( 0, 0 ) ) {\r\n        let {\r\n            m11, m12, m13,\r\n            m21, m22, m23,\r\n        } = this\r\n        let { x, y } = v\r\n        target.x = m11 * x + m12 * y + m13 * z\r\n        target.y = m21 * x + m22 * y + m23 * z\r\n        return target\r\n    }\r\n\r\n    static translation( x = 0, y = 0 ) {\r\n        return new Matrix(\r\n            1, 0, x,\r\n            0, 1, y,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    static vTranslation( v: Vector ) {\r\n        return new Matrix(\r\n            1, 0, v.x,\r\n            0, 1, v.y,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    static rotation( angle = 0 ) {\r\n        let s = Math.sin( angle )\r\n        let c = Math.cos( angle )\r\n        return new Matrix(\r\n            c, -s, 0,\r\n            s, c, 0,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    static scale( x = 1, y = 1 ) {\r\n        return new Matrix(\r\n            x, 0, 0,\r\n            0, y, 0,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    // https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations\r\n    static transformation( preTranslationX, preTranslationY, angle, scaleX, scaleY, translationX, translationY ) {\r\n        let px = preTranslationX, py = preTranslationY\r\n        let a = angle\r\n        let sx = scaleX\r\n        let sy = scaleY\r\n        let x = translationX\r\n        let y = translationY\r\n        let s = Math.sin( a ), c = Math.cos( a )\r\n        return new Matrix(\r\n            sx * c, -sy * s, px * sx * c - py * sy * s + x,\r\n            sx * s, sy * c, px * sx * s + py * sy * c + y,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    static scaleAndTranslate( scale, translationX, translationY ) {\r\n        let s = scale\r\n        let x = translationX\r\n        let y = translationY\r\n        return new Matrix(\r\n            s, 0, x,\r\n            0, s, y,\r\n            0, 0, 1\r\n        )\r\n    }\r\n\r\n    print() {\r\n        let {\r\n            m11, m12, m13,\r\n            m21, m22, m23,\r\n            m31, m32, m33,\r\n        } = this\r\n        let rows = [\r\n            [ m11, m12, m13 ],\r\n            [ m21, m22, m23 ],\r\n            [ m31, m32, m33 ],\r\n        ]\r\n        let columnWidths = [\r\n            [ m11, m21, m31 ],\r\n            [ m12, m22, m32 ],\r\n            [ m13, m23, m33 ],\r\n        ].map(\r\n            column =>\r\n                column.map(\r\n                    e => e.toString().length\r\n                ).reduce(\r\n                    ( a, b ) => Math.max( a, b )\r\n                )\r\n        )\r\n        let pad = ( n: number, column: number ) => n.toString().padStart( columnWidths[ column ] )\r\n        let result = rows.map(\r\n            row => \"| \" + row.map( pad ).join( \"  \" ) + \" |\"\r\n        ).join( \"\\n\" )\r\n        console.log( result )\r\n    }\r\n\r\n}\r\n\r\n// Code generation:\r\n\r\n// function* rangeGen( n ) { for ( let i = 1; i <= n; i++ ) yield i }\r\n// function range( n ) { return Array.from( rangeGen( n ) ) }\r\nfunction range( n ) {\r\n    let res = [] as number[]\r\n    for ( let i = 1; i <= n; i++ ) res.push( i )\r\n    return res\r\n}\r\n\r\nfunction determinant2(\r\n    a11, a12,\r\n    a21, a22\r\n) {\r\n    return \"( \" + a11 + \" * \" + a22 + \" - \" + a12 + \" * \" + a21 + \" )\"\r\n}\r\n\r\nfunction determinant3( args: string[] ) {\r\n    let [\r\n        a11, a12, a13,\r\n        a21, a22, a23,\r\n        a31, a32, a33\r\n    ] = args\r\n    return `(${ a11 } * ${ determinant2( a22, a23, a32, a33 ) } -\r\n    ${ a12 } * ${ determinant2( a21, a23, a31, a33 ) } +\r\n    ${ a13 } * ${ determinant2( a21, a22, a31, a32 ) })`\r\n}\r\n\r\nfunction destructureMatrix( name: string ) {\r\n    let destructureArgs = range( 3 ).map(\r\n        j => range( 3 ).map(\r\n            i => \"m\" + j + i + \": \" + name + j + i\r\n        ).join( \", \" )\r\n    ).join( \",\\n    \" )\r\n    return \"let {\\n    \" + destructureArgs + \"\\n} = \" + name\r\n}\r\n\r\nconst determinant = ( () => {\r\n    let args = range( 3 ).map( ( j ) => range( 3 ).map( ( i ) => \"A.m\" + j + i ) ).flat()\r\n    let body = \"return \" + determinant3( args )\r\n    return new Function( \"A\", \"Matrix3\", body )\r\n} )()\r\n\r\nconst multiplyMatrix = ( () => {\r\n    let destructureA = destructureMatrix( \"A\" )\r\n    let destructureB = destructureMatrix( \"B\" )\r\n    let matrixArgs = range( 3 ).map(\r\n        j => range( 3 ).map(\r\n            i => range( 3 ).map(\r\n                k => \"A\" + j + k + \" * B\" + k + i\r\n            ).join( \" + \" )\r\n        ).join( \", \" )\r\n    ).join( \",\\n    \" )\r\n    let body = [\r\n        destructureA,\r\n        destructureB,\r\n        `return new Matrix3(\\n    ${ matrixArgs }\\n)`\r\n    ].join( \"\\n\" )\r\n    return new Function( \"A\", \"B\", \"Matrix3\", body )\r\n} )()\r\n\r\n// https://en.wikipedia.org/wiki/Cramer%27s_rule#Finding_inverse_matrix\r\n// https://en.wikipedia.org/wiki/Adjugate_matrix#3_%C3%97_3_generic_matrix\r\nconst inverse = ( () => {\r\n    let destructure = destructureMatrix( \"A\" )\r\n\r\n    let detArgs = range( 3 ).map( ( j ) => range( 3 ).map( ( i ) => \"A\" + j + i ) ).flat()\r\n    let coefStatemnent = \"let c = 1 / \" + determinant3( detArgs )\r\n\r\n    let det2 = ( a, b, c, d ) => determinant2( \"A\" + a, \"A\" + b, \"A\" + c, \"A\" + d )\r\n    // Adjugate matrix:\r\n    let b11 = det2( 22, 23, 32, 33 ), b12 = \"-\" + det2( 12, 13, 32, 33 ), b13 = det2( 12, 13, 22, 23 )\r\n    let b21 = \"-\" + det2( 21, 23, 31, 33 ), b22 = det2( 11, 13, 31, 33 ), b23 = \"-\" + det2( 11, 13, 21, 23 )\r\n    let b31 = det2( 21, 22, 31, 32 ), b32 = \"-\" + det2( 11, 12, 31, 32 ), b33 = det2( 11, 12, 21, 22 )\r\n\r\n    let matrixArgs = [\r\n        [ b11, b12, b13 ],\r\n        [ b21, b22, b23 ],\r\n        [ b31, b32, b33 ]\r\n    ].map( row => row.map( e => e + \" * c\" ).join( \", \" ) ).join( \",\\n    \" )\r\n\r\n    let body = [\r\n        destructure,\r\n        coefStatemnent,\r\n        `\\nreturn new Matrix3(${ matrixArgs })`\r\n    ].join( \"\\n\" )\r\n    return new Function( \"A\", \"Matrix3\", body )\r\n} )()\r\n\r\nconst equals = ( () => {\r\n    let destructureA = destructureMatrix( \"A\" )\r\n    let destructureB = destructureMatrix( \"B\" )\r\n    let comparisons = range( 3 ).map(\r\n        j => range( 3 ).map(\r\n            i => {\r\n                let index = j.toString() + i.toString()\r\n                return `if (Math.abs(A${ index } - B${ index }) > epsilon) return false`\r\n            }\r\n        )\r\n    ).flat()\r\n    let body = [\r\n        destructureA,\r\n        destructureB,\r\n        ...comparisons,\r\n        \"return true\"\r\n    ].join( \"\\n\" )\r\n    return new Function( \"A\", \"B\", \"epsilon\", \"Matrix3\", body )\r\n} )()","import Body from \"../dynamics/Body\"\r\nimport AABB from \"../math/AABB\"\r\nimport Matrix from \"../math/Matrix\"\r\nimport Vector from \"../math/Vector\"\r\nimport ICollider from \"./ICollider\"\r\n\r\nexport default class PolygonCollider implements ICollider {\r\n    body!: Body\r\n    model: Vector[]\r\n    vertices: Vector[]\r\n    bounds: AABB\r\n    constructor( model: Vector[] ) {\r\n        this.model = model\r\n        this.vertices = []\r\n        for ( let i = 0; i < model.length; i++ )\r\n            this.vertices.push( model[ i ].copy() )\r\n        this.bounds = new AABB( 0, 0, 0, 0 )\r\n    }\r\n    support( axis: Vector ): Vector {\r\n        let verts = this.vertices\r\n        let best = verts[ 0 ]\r\n        let bestDist = best.dot( axis )\r\n        for ( let i = 1; i < verts.length; i++ ) {\r\n            let next = verts[ i ]\r\n            let nextDist = next.dot( axis )\r\n            if ( nextDist > bestDist )\r\n                best = next, bestDist = nextDist\r\n        }\r\n        return best\r\n    }\r\n    onUpdatePosition(): void {\r\n        let { x, y } = this.body.position\r\n        let angle = this.body.angle\r\n        let mat = Matrix.transformation( 0, 0, angle, 1, 1, x, y )\r\n        for ( let i = 0; i < this.model.length; i++ )\r\n            mat.multiplyVec( this.model[ i ], 1, this.vertices[ i ] )\r\n        this.bounds = AABB.polygonBounds( this.vertices )\r\n    }\r\n}","import Body from \"../dynamics/Body\"\r\nimport AABB from \"../math/AABB\"\r\nimport Vector from \"../math/Vector\"\r\nimport ICollider from \"./ICollider\"\r\n\r\nexport default class CircleCollider implements ICollider {\r\n    body!: Body\r\n    bounds!: AABB\r\n    radius: number\r\n    constructor( radius: number ) {\r\n        this.radius = radius\r\n    }\r\n    support( axis: Vector ): Vector {\r\n        return this.body.position.add( axis.unit().scale( this.radius ) )\r\n    }\r\n    onUpdatePosition(): void {\r\n        let r = this.radius\r\n        let { x, y } = this.body.position\r\n        this.bounds = new AABB( x - r, y - r, x + r, y + r )\r\n    }\r\n}","import Matrix from \"./Matrix\"\r\nimport Vector from \"./Vector\"\r\n\r\nexport type SupportFunction = ( v: Vector ) => Vector\r\n\r\nconst SupportFunctions = {\r\n    polygon: ( poly: Vector[] ) => ( axis: Vector ) => {\r\n        let best = poly[ 0 ]\r\n        let bestDist = best.dot( axis )\r\n        for ( let i = 1; i < poly.length; i++ ) {\r\n            let next = poly[ i ]\r\n            let nextDist = next.dot( axis )\r\n            if ( nextDist > bestDist )\r\n                best = next, bestDist = nextDist\r\n        }\r\n        return best\r\n    },\r\n    transform: ( support: SupportFunction, mat: Matrix ) => {\r\n        let invMat = mat.inverse()\r\n        return ( axis: Vector ) => mat.multiplyVec( support( invMat.multiplyVec( axis, 0 ) ) )\r\n    },\r\n    round: ( support: SupportFunction, radius ) => ( axis: Vector ) => support( axis ).add( axis.unit().scale( radius ) ),\r\n    translate: ( support: SupportFunction, v: Vector ) => ( axis: Vector ) => support( axis ).add( v )\r\n}\r\nexport default SupportFunctions","import AABB from \"../math/AABB\"\r\nimport { clamp, contains, remap } from \"../math/math\"\r\nimport Vector from \"../math/Vector\"\r\n\r\n// If calculating bounds is slow, it should be cached on the provider because it is called 2-3 times per body here.\r\nexport interface IBroadphaseEntry { getBounds: () => AABB, id: number }\r\nexport default class Broadphase {\r\n    static findPairs<T extends IBroadphaseEntry>( bodies: T[], cellSize: number, callback: ( a: T, b: T ) => void ) {\r\n        let bounds = AABB.empty()\r\n        for ( let body of bodies )\r\n            bounds.addAABB( body.getBounds() )\r\n\r\n        let width = bounds.width()\r\n        let height = bounds.height()\r\n        let gridWidth = Math.ceil( width / cellSize )\r\n        let gridHeight = Math.ceil( height / cellSize )\r\n\r\n        const x_to_i = ( x: number ) => clamp( 0, gridWidth - 1, Math.floor( remap( bounds.minx, bounds.maxx, 0, gridWidth - 1, x ) ) )\r\n        const y_to_j = ( y: number ) => clamp( 0, gridHeight - 1, Math.floor( remap( bounds.miny, bounds.maxy, 0, gridHeight - 1, y ) ) )\r\n\r\n        type GridCell = T[]\r\n        const grid = new Map<number, GridCell>()\r\n        // const grid: GridCell[] = []\r\n        // for ( let i = 0; i < gridWidth * gridHeight; i++ )\r\n        //     grid.push( [] )\r\n\r\n        // Place bodies in grid.\r\n        for ( let body of bodies ) {\r\n            let bounds = body.getBounds()\r\n            let i1 = x_to_i( bounds.minx )\r\n            let i2 = x_to_i( bounds.maxx )\r\n            let j1 = y_to_j( bounds.miny )\r\n            let j2 = y_to_j( bounds.maxy )\r\n            for ( let i = i1; i <= i2; i++ ) {\r\n                for ( let j = j1; j <= j2; j++ ) {\r\n                    let cellIndex = i * gridHeight + j\r\n                    if ( !grid.has( cellIndex ) )\r\n                        grid.set( cellIndex, [] )\r\n                    grid.get( cellIndex )?.push( body )\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        let visitedPairs = new Set<number>()\r\n\r\n        for ( let gridCell of grid.values() ) {\r\n            for ( let iBodyA = 0; iBodyA < gridCell.length; iBodyA++ ) {\r\n                let bodyA = gridCell[ iBodyA ]\r\n                let boundsA = bodyA.getBounds()\r\n                for ( let iBodyB = iBodyA + 1; iBodyB < gridCell.length; iBodyB++ ) {\r\n                    let bodyB = gridCell[ iBodyB ]\r\n\r\n                    let boundsB = bodyB.getBounds()\r\n                    if ( !boundsA.overlaps( boundsB ) )\r\n                        continue\r\n\r\n                    // Check if pair has been visited.\r\n                    let minId = Math.min( bodyA.id, bodyB.id )\r\n                    let maxId = Math.max( bodyA.id, bodyB.id )\r\n                    let pairKey = ( maxId << 16 ) | minId\r\n                    if ( visitedPairs.has( pairKey ) ) continue\r\n                    visitedPairs.add( pairKey )\r\n\r\n                    callback( bodyA, bodyB )\r\n                }\r\n            }\r\n        }\r\n\r\n        // // Iterate over grid to generate pairs.\r\n        // for ( let i = 0; i < gridWidth; i++ ) {\r\n        //     for ( let j = 0; j < gridHeight; j++ ) {\r\n        //         let cellIndex = i * gridHeight + j\r\n        //         let gridCell = grid[ cellIndex ]\r\n        //         for ( let iBodyA = 0; iBodyA < gridCell.length; iBodyA++ ) {\r\n        //             let bodyA = gridCell[ iBodyA ]\r\n        //             let boundsA = bodyA.getBounds()\r\n        //             for ( let iBodyB = iBodyA + 1; iBodyB < gridCell.length; iBodyB++ ) {\r\n        //                 let bodyB = gridCell[ iBodyB ]\r\n\r\n        //                 let boundsB = bodyB.getBounds()\r\n        //                 if ( !boundsA.overlaps( boundsB ) )\r\n        //                     continue\r\n\r\n        //                 // Check if pair has been visited.\r\n        //                 let minId = Math.min( bodyA.id, bodyB.id )\r\n        //                 let maxId = Math.max( bodyA.id, bodyB.id )\r\n        //                 let pairKey = ( maxId << 16 ) | minId\r\n        //                 if ( visitedPairs.has( pairKey ) ) continue\r\n        //                 visitedPairs.add( pairKey )\r\n\r\n        //                 callback( bodyA, bodyB )\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // }\r\n    }\r\n}","import Body from \"../dynamics/Body\"\r\nimport { modulus } from \"../math/math\"\r\nimport SupportFunctions, { SupportFunction } from \"../math/SupportFunctions\"\r\nimport Vector from \"../math/Vector\"\r\nimport Broadphase from \"./Broadphase\"\r\nimport CircleCollider from \"./CircleCollider\"\r\nimport ICollider from \"./ICollider\"\r\nimport PolygonCollider from \"./PolygonCollider\"\r\n\r\n// Normal should always face away from bodyA\r\nexport type CollisionInfo = { normal: Vector, separation: number, contact: Vector[] }\r\nexport type Pair = { bodyA: Body, bodyB: Body, info: CollisionInfo }\r\nexport type RaycastInfo = { time: number, normal: Vector }\r\n\r\nexport function getCollisionPairs( bodies: Body[], gridCellSize: number ) {\r\n    let pairs: Pair[] = []\r\n    Broadphase.findPairs(\r\n        bodies, gridCellSize,\r\n        ( bodyA, bodyB ) => {\r\n            let info = getCollisionInfo( bodyA.collider, bodyB.collider )\r\n            if ( !info )\r\n                return\r\n            if ( info.separation <= 0 )\r\n                pairs.push( { bodyA, bodyB, info } )\r\n        }\r\n    )\r\n    return pairs\r\n}\r\n\r\nexport function getCollisionInfo( a: ICollider, b: ICollider ) {\r\n    if ( a instanceof PolygonCollider && b instanceof PolygonCollider )\r\n        return polygonVsPolygon( a.vertices, b.vertices )\r\n    if ( a instanceof CircleCollider && b instanceof CircleCollider )\r\n        return circleVsCirlce( a, b )\r\n    if ( a instanceof PolygonCollider && b instanceof CircleCollider )\r\n        return polygonVsCircle( a, b, 1 )\r\n    if ( a instanceof CircleCollider && b instanceof PolygonCollider )\r\n        return polygonVsCircle( b, a, -1 )\r\n    return undefined\r\n}\r\n\r\nfunction circleVsCirlce( a: CircleCollider, b: CircleCollider ): CollisionInfo {\r\n    let aPos = a.body.position, bPos = b.body.position\r\n    let diff = bPos.subtract( aPos )\r\n    let separation = diff.length() - a.radius - b.radius\r\n    let normal = diff.unit()\r\n    let contact = [ aPos.add( normal.scale( a.radius + separation / 2 ) ) ]\r\n    return { normal, separation, contact }\r\n}\r\n\r\nexport function polygonVsPolygon( polyA: Vector[], polyB: Vector[] ): CollisionInfo {\r\n    let supportA = SupportFunctions.polygon( polyA ), supportB = SupportFunctions.polygon( polyB )\r\n    let normal = Vector.zero\r\n    let separation = -Infinity\r\n    function checkPolygonAxes( poly: Vector[], otherSupport: SupportFunction, normalSign: number ) {\r\n        for ( let i = 0; i < poly.length; i++ ) {\r\n            let j = modulus( i + 1, poly.length )\r\n            let pt_i = poly[ i ], pt_j = poly[ j ]\r\n            let edgeNormal = pt_j.subtract( pt_i ).leftNormal().unit() // Normal toward \"poly\"\r\n            let distance = pt_i.dot( edgeNormal ) - otherSupport( edgeNormal ).dot( edgeNormal )\r\n            if ( distance > separation )\r\n                separation = distance, normal = edgeNormal.scale( normalSign )\r\n        }\r\n        return { separation, normal }\r\n    }\r\n    checkPolygonAxes( polyA, supportB, -1 )\r\n    checkPolygonAxes( polyB, supportA, 1 )\r\n    let contacts = generateContacts( supportA, supportB, normal )\r\n    return {\r\n        normal,\r\n        separation,\r\n        contact: contacts\r\n    }\r\n}\r\n\r\nfunction polygonVsCircle( poly: PolygonCollider, circle: CircleCollider, normalSign: number ): CollisionInfo {\r\n    let circlePos = circle.body.position\r\n    let vertices = poly.vertices\r\n    let separation = -Infinity\r\n    let normal = Vector.zero\r\n    for ( let i = 0; i < vertices.length; i++ ) {\r\n        let j = modulus( i + 1, vertices.length )\r\n        let pt_i = vertices[ i ], pt_j = vertices[ j ]\r\n        let edgeNormal = pt_j.subtract( pt_i ).rightNormal().unit() // Normal away from \"poly\"\r\n        let distance = circle.support( edgeNormal.negate() ).dot( edgeNormal ) - pt_i.dot( edgeNormal )\r\n        if ( distance > separation )\r\n            separation = distance, normal = edgeNormal.scale( normalSign )\r\n        let vertexNormal = circlePos.subtract( pt_i ).unit() // Normal away from \"poly\"\r\n        distance = circle.support( vertexNormal.negate() ).dot( vertexNormal ) - poly.support( vertexNormal ).dot( vertexNormal )\r\n        if ( distance > separation )\r\n            separation = distance, normal = vertexNormal.scale( normalSign )\r\n    }\r\n    let normalAwayFromCircle = normal.scale( -normalSign )\r\n    let contacts = [ circlePos.add( normalAwayFromCircle.scale( circle.radius + separation / 2 ) ) ]\r\n    return {\r\n        normal,\r\n        separation,\r\n        contact: contacts\r\n    }\r\n\r\n}\r\n\r\nexport function generateContacts( supportA: SupportFunction, supportB: SupportFunction, normal: Vector, angularTolerance = 0.01 ) {\r\n    // TODO: Simplify and reduce the number of allocations here.\r\n\r\n    let rotator = Vector.polar( angularTolerance, 1 )\r\n    let normalHigh = normal.complexProduct( rotator )\r\n    let normalLow = normal.complexQuotient( rotator )\r\n\r\n    let aUpper = supportA( normalLow )\r\n    let aLower = supportA( normalHigh )\r\n    let bUpper = supportB( normalHigh.negate() )\r\n    let bLower = supportB( normalLow.negate() )\r\n\r\n    let tangent = normal.rightNormal()\r\n    let upperExtent = Math.min( aUpper.dot( tangent ), bUpper.dot( tangent ) )\r\n    let lowerExtent = Math.max( aLower.dot( tangent ), bLower.dot( tangent ) )\r\n\r\n    let aUpperContact = aUpper.clampAlongAxis( tangent, lowerExtent, upperExtent )\r\n    let aLowerContact = aLower.clampAlongAxis( tangent, lowerExtent, upperExtent )\r\n    let bUpperContact = bUpper.clampAlongAxis( tangent, lowerExtent, upperExtent )\r\n    let bLowerContact = bLower.clampAlongAxis( tangent, lowerExtent, upperExtent )\r\n\r\n    let upperContact = aUpperContact.lerp( bUpperContact, .5 )\r\n    let lowerContact = aLowerContact.lerp( bLowerContact, .5 )\r\n\r\n    if ( upperExtent - lowerExtent < 1 )\r\n        return [ upperContact ]\r\n\r\n    return [ upperContact.lerp( lowerContact, .5 ), upperContact, lowerContact ]\r\n    // return [ upperContact, lowerContact ]\r\n}\r\n\r\nexport function shapecast( supportA: SupportFunction, velocityA: Vector, supportB: SupportFunction, velocityB: Vector ) {\r\n    let minkowskiDiff = ( axis: Vector ) => supportA( axis ).subtract( supportB( axis.negate() ) )\r\n    let relativeVelocity = velocityB.subtract( velocityA )\r\n    return raycastSupportFunction( minkowskiDiff, relativeVelocity )\r\n}\r\n\r\nfunction raycastSupportFunction( support: SupportFunction, ray: Vector, maxIterations = 10 ): RaycastInfo | undefined {\r\n    let a = support( ray.rightNormal() )\r\n    let b = support( ray.leftNormal() )\r\n\r\n    if ( a.dot( ray.rightNormal() ) < 0 )\r\n        return undefined\r\n\r\n    if ( b.dot( ray.leftNormal() ) < 0 )\r\n        return undefined\r\n\r\n    let i = 0\r\n    while ( true ) {\r\n        let ab = b.subtract( a )\r\n        let ao = a.negate()\r\n        let abNormal = ab.normalOnSide( ao )\r\n        let c = support( abNormal )\r\n\r\n        if ( ( ++i == maxIterations ) || c.equivalent( a ) || c.equivalent( b ) ) {\r\n            let normal = abNormal.unit()\r\n            let edgeDist = normal.dot( a )\r\n            let approachSpeed = normal.dot( ray )\r\n            let time = edgeDist / approachSpeed\r\n            return { time, normal }\r\n        }\r\n\r\n        if ( c.dot( ray.rightNormal() ) > 0 )\r\n            a = c\r\n        else\r\n            b = c\r\n    }\r\n}","import { Pair } from \"../collision/Collision\"\r\n\r\nexport default function solvePositions(\r\n    pairs: Pair[], options: { iterations: number, positionalDamping: number, allowedPenetration: number }\r\n) {\r\n    let { iterations, positionalDamping, allowedPenetration } = options\r\n    for ( let i = 0; i < iterations; i++ ) {\r\n        for ( let pair of pairs ) {\r\n            let { bodyA, bodyB, info } = pair\r\n            let { normal, separation } = info\r\n\r\n            let massA = bodyA.mass\r\n            let massB = bodyB.mass\r\n\r\n            let correctedDisplacement = normal.dot( bodyB.positionalCorrection.subtract( bodyA.positionalCorrection ) )\r\n\r\n            let displacement = ( -separation - correctedDisplacement - allowedPenetration ) * positionalDamping\r\n            if ( displacement < 0 )\r\n                continue\r\n\r\n            let massRatio = massB / massA\r\n            let displacementB = displacement / ( 1 + massRatio )\r\n            let displacementA = displacement - displacementB\r\n\r\n            if ( !bodyA.isStatic ) {\r\n                bodyA.position.x -= normal.x * displacementA\r\n                bodyA.position.y -= normal.y * displacementA\r\n                bodyA.positionalCorrection.x -= normal.x * displacementA\r\n                bodyA.positionalCorrection.y -= normal.y * displacementA\r\n            }\r\n\r\n            if ( !bodyB.isStatic ) {\r\n                bodyB.position.x += normal.x * displacementB\r\n                bodyB.position.y += normal.y * displacementB\r\n                bodyB.positionalCorrection.x += normal.x * displacementB\r\n                bodyB.positionalCorrection.y += normal.y * displacementB\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Pair } from \"../collision/Collision\"\r\nimport Vector from \"../math/Vector\"\r\n\r\nexport default function solveVelocities(\r\n    pairs: Pair[], options: { iterations: number, minBounceVelocity: number, restitution: number, coefficientOfFriction: number }\r\n) {\r\n    let { iterations, minBounceVelocity, restitution, coefficientOfFriction } = options\r\n    for ( let i = 0; i < iterations; i++ ) {\r\n        for ( let j = 0; j < pairs.length; j++ ) {\r\n            let pair = pairs[ j ]\r\n            let { bodyA, bodyB, info } = pair\r\n            let { normal, contact } = info\r\n            for ( let k = 0; k < contact.length; k++ ) {\r\n                let c = contact[ k ]\r\n\r\n                let ra = c.subtract( bodyA.position )\r\n                let rb = c.subtract( bodyB.position )\r\n\r\n                let raCrossN = ra.cross( normal )\r\n                let rbCrossN = rb.cross( normal )\r\n\r\n                let velA = bodyA.velocity.add( ra.crossZLeft( bodyA.angularVelocity ) )\r\n                let velB = bodyB.velocity.add( rb.crossZLeft( bodyB.angularVelocity ) )\r\n                let velBA = velB.subtract( velA )\r\n\r\n                let _restitution = velBA.lengthSquared() < minBounceVelocity ** 2 ? 0 : restitution\r\n                let combinedEffectiveMass = 1 / ( bodyA.invMass + bodyB.invMass + raCrossN ** 2 * bodyA.invInertia + rbCrossN ** 2 * bodyB.invInertia )\r\n                let normalImpulse = velBA.dot( normal ) * ( 1 + _restitution ) * combinedEffectiveMass\r\n\r\n                if ( normalImpulse >= 0 )\r\n                    continue\r\n\r\n                let tangent = normal.leftNormal()\r\n                let tangentImpulse = normalImpulse * coefficientOfFriction * -Math.sign( velBA.dot( tangent ) )\r\n\r\n                let impulse = new Vector(\r\n                    normal.x * normalImpulse + tangent.x * tangentImpulse,\r\n                    normal.y * normalImpulse + tangent.y * tangentImpulse\r\n                )\r\n\r\n                if ( !bodyA.isStatic ) {\r\n                    bodyA.velocity.x += impulse.x * bodyA.invMass\r\n                    bodyA.velocity.y += impulse.y * bodyA.invMass\r\n                    bodyA.angularVelocity += ra.cross( impulse ) * bodyA.invInertia\r\n                }\r\n                if ( !bodyB.isStatic ) {\r\n                    bodyB.velocity.x -= impulse.x * bodyB.invMass\r\n                    bodyB.velocity.y -= impulse.y * bodyB.invMass\r\n                    bodyB.angularVelocity -= rb.cross( impulse ) * bodyB.invInertia\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import CircleCollider from \"./collision/CircleCollider\"\r\nimport { getCollisionPairs, Pair } from \"./collision/Collision\"\r\nimport PolygonCollider from \"./collision/PolygonCollider\"\r\nimport Body from \"./dynamics/Body\"\r\nimport solvePositions from \"./dynamics/solvePositions\"\r\nimport solveVelocities from \"./dynamics/solveVelocities\"\r\nimport Drawing from \"./graphics/Drawing\"\r\nimport Vector from \"./math/Vector\"\r\n\r\ntype EngineOptions = {\r\n    timeStep: number\r\n    gravity: number\r\n    linearAirDrag: number\r\n    rotationalAirDrag: number\r\n    linearMotionThreshold: number\r\n    angularMotionThreshold: number\r\n    velocitySolverOptions: {\r\n        iterations: number\r\n        minBounceVelocity: number\r\n        coefficientOfFriction: number\r\n        restitution: number\r\n    }\r\n    positionalSolverOptions: {\r\n        iterations: number\r\n        positionalDamping: number\r\n        allowedPenetration: number\r\n    }\r\n    broadphaseCellSize: number\r\n}\r\nexport default class Engine {\r\n    bodies: Body[]\r\n    pairs: Pair[]\r\n    options: EngineOptions\r\n    constructor( options: EngineOptions ) {\r\n        this.bodies = []\r\n        this.pairs = []\r\n        this.options = options\r\n    }\r\n    fixedUpdate() {\r\n        let {\r\n            timeStep, linearMotionThreshold, angularMotionThreshold,\r\n            gravity, rotationalAirDrag, linearAirDrag, broadphaseCellSize,\r\n            velocitySolverOptions, positionalSolverOptions\r\n\r\n        } = this.options\r\n        let { bodies } = this\r\n        for ( let body of bodies ) {\r\n            body.updatePosition( timeStep, linearMotionThreshold, angularMotionThreshold )\r\n            body.updateVelocity( timeStep, gravity, rotationalAirDrag, linearAirDrag )\r\n        }\r\n        this.pairs = getCollisionPairs( this.bodies, broadphaseCellSize )\r\n        solveVelocities( this.pairs, velocitySolverOptions )\r\n        solvePositions( this.pairs, positionalSolverOptions )\r\n    }\r\n    renderToCanvas( c: CanvasRenderingContext2D, options?: { drawOutlines?: boolean, drawPosition?: boolean, drawOrientation?: boolean, drawContacts?: boolean, drawPairEdges?: boolean } ) {\r\n        options = options ?? {}\r\n        Drawing.context = c\r\n        c.lineWidth = 2\r\n        c.lineCap = \"round\"\r\n        c.lineJoin = \"round\"\r\n        for ( let body of this.bodies ) {\r\n            const marigin = this.options.positionalSolverOptions.allowedPenetration + c.lineWidth\r\n            if ( body.collider instanceof PolygonCollider ) {\r\n                Drawing.polygon( body.collider.vertices ).fill( body.color )\r\n                if ( options.drawOutlines )\r\n                    Drawing.polygon( body.collider.vertices, -marigin ).stroke( body.outlineColor )\r\n            } else if ( body.collider instanceof CircleCollider ) {\r\n                Drawing.vCircle( body.position, body.collider.radius ).fill( body.color )\r\n                if ( options.drawOutlines )\r\n                    Drawing.vCircle( body.position, body.collider.radius - marigin ).stroke( body.outlineColor )\r\n            }\r\n\r\n            let p = body.position\r\n            if ( options.drawPosition )\r\n                Drawing.vCircle( p, 3 ).fill( \"white\" )\r\n            if ( options.drawOrientation )\r\n                Drawing.vLine( p, p.add( Vector.polar( body.angle, 10 ) ) ).stroke( \"white\" )\r\n        }\r\n\r\n        if ( options.drawContacts || options.drawPairEdges ) {\r\n            for ( let pair of this.pairs ) {\r\n                if ( options.drawContacts ) {\r\n                    let n = pair.info.normal.scale( 5 )\r\n                    for ( let p of pair.info.contact ) {\r\n                        Drawing.vCircle( p, 2 ).fill( \"white\" )\r\n                        Drawing.vLine( p.subtract( n ), p.add( n ) ).stroke( \"rgba(255, 255, 255, .5)\" )\r\n                    }\r\n                }\r\n                if ( options.drawPairEdges ) {\r\n                    let { bodyA, bodyB } = pair\r\n                    if ( bodyA.isStatic || bodyB.isStatic )\r\n                        continue\r\n                    let posA = bodyA.position, posB = bodyB.position\r\n                    Drawing.vLine( posA, posB ).stroke( \"white\" )\r\n                }\r\n            }\r\n        }\r\n    }\r\n    averagePenetration() {\r\n        let pairs = this.pairs\r\n        if ( pairs.length > 0 )\r\n            return pairs.map( x => Math.max( 0, -x.info.separation ) ).reduce( ( a, b ) => a + b ) / pairs.length\r\n        return 0\r\n    }\r\n}","import Clock from \"../Clock\"\r\nimport { boxPolygon, initCanvas, notQuiteInfiniteMass, polygon } from \"../common\"\r\nimport Body from \"../dynamics/Body\"\r\nimport Input from \"../Input\"\r\nimport Vector from \"../math/Vector\"\r\nimport Drawing from \"../graphics/Drawing\"\r\nimport PolygonCollider from \"../collision/PolygonCollider\"\r\nimport CircleCollider from \"../collision/CircleCollider\"\r\nimport ICollider from \"../collision/ICollider\"\r\nimport Engine from \"../Engine\"\r\n\r\nconst canvas = initCanvas()\r\nconst c = canvas.getContext( \"2d\" ) as CanvasRenderingContext2D\r\nconst input = new Input()\r\nconst clock = new Clock()\r\n\r\nconst colorPalette = [ \"#264653\", \"#2A9D8F\", \"#E9C46A\", \"#F4A261\", \"#E76F51\" ]\r\nconst offWhite = \"#ebe6d1\"\r\nconst offWhiteDarker = \"#d1ccb6\"\r\nconst randomColor = () => colorPalette[ Math.random() * colorPalette.length | 0 ]\r\n\r\nconst timeStep = 1\r\nconst wallThickness = 80\r\nconst engine = new Engine( {\r\n    timeStep: 1,\r\n    gravity: 0.07,\r\n    linearAirDrag: 1,\r\n    rotationalAirDrag: 1,\r\n    linearMotionThreshold: .1,\r\n    angularMotionThreshold: .001,\r\n    velocitySolverOptions: {\r\n        iterations: 30,\r\n        minBounceVelocity: 0,\r\n        restitution: .3,\r\n        coefficientOfFriction: .0\r\n    },\r\n    positionalSolverOptions: {\r\n        iterations: 7,\r\n        positionalDamping: .25,\r\n        allowedPenetration: 0\r\n    },\r\n    broadphaseCellSize: 100\r\n} )\r\n\r\nlet dontRender = false\r\nwindow.addEventListener( \"keypress\", ev => {\r\n    if ( ev.key == \" \" ) dontRender = !dontRender\r\n} )\r\n\r\nsetupBodies()\r\nfunction setupBodies() {\r\n    const staticBodies = [\r\n        new Body( {\r\n            collider: new PolygonCollider( boxPolygon( canvas.width, wallThickness ) ),\r\n            position: new Vector( canvas.width / 2, canvas.height ),\r\n            isStatic: true,\r\n            color: offWhiteDarker\r\n        } ),\r\n\r\n        new Body( {\r\n            collider: new CircleCollider( 100 ),\r\n            position: new Vector( canvas.width / 2, canvas.height / 4 ),\r\n            isStatic: true,\r\n            color: offWhiteDarker\r\n        } ),\r\n        new Body( {\r\n            collider: new CircleCollider( 100 ),\r\n            position: new Vector( canvas.width / 2 - 200, canvas.height / 2 ),\r\n            isStatic: true,\r\n            color: offWhiteDarker\r\n        } ),\r\n        new Body( {\r\n            collider: new CircleCollider( 100 ),\r\n            position: new Vector( canvas.width / 2 + 200, canvas.height / 2 ),\r\n            isStatic: true,\r\n            color: offWhiteDarker\r\n        } ),\r\n        new Body( {\r\n            collider: new CircleCollider( 100 ),\r\n            position: new Vector( 0, canvas.height ),\r\n            isStatic: true,\r\n            color: offWhiteDarker\r\n        } ),\r\n        new Body( {\r\n            collider: new CircleCollider( 100 ),\r\n            position: new Vector( canvas.width, canvas.height ),\r\n            isStatic: true,\r\n            color: offWhiteDarker\r\n        } )\r\n    ]\r\n\r\n    for ( let body of staticBodies )\r\n        engine.bodies.push( body )\r\n\r\n    for ( let i = 0; i < 1000; i++ ) {\r\n        // let radius = 20 // (40 + (Math.random() - .5) * 20)\r\n        let radius = ( Math.random() * 10 + 20 ) * .825\r\n        let mass = radius ** 2\r\n        let inertia = mass * radius ** 2 * .5\r\n        let collider: ICollider\r\n        if ( Math.random() < .5 )\r\n            collider = new CircleCollider( radius * .8 )\r\n        else\r\n            collider = new PolygonCollider( polygon( Math.floor( Math.random() * 6 ) + 3, radius ) )\r\n        engine.bodies.push( new Body( {\r\n            collider,\r\n            // model: polygon( 5, radius ),\r\n            position: new Vector( Math.random() * canvas.width, Math.random() * canvas.height ),\r\n            angularVelocity: ( Math.random() - .5 ),\r\n            velocity: Vector.polar( Math.random() * Math.PI * 2, Math.random() * 20 ),\r\n            mass, inertia,\r\n            color: randomColor()\r\n        } ) )\r\n    }\r\n}\r\n\r\nmainLoop()\r\nfunction mainLoop() {\r\n    clock.nextFrame()\r\n    render()\r\n    update()\r\n    window.requestAnimationFrame( mainLoop )\r\n}\r\n\r\nfunction update() {\r\n    for ( let body of engine.bodies ) {\r\n        if ( body.isStatic )\r\n            continue\r\n\r\n        // Zero-gravity when right-clicking.\r\n        if ( input.mouse.get( 2 ) )\r\n            body.velocity.y -= engine.options.gravity * timeStep\r\n\r\n        // Repel when left-clicking.\r\n        if ( input.mouse.get( 0 ) ) {\r\n            let power = -10000\r\n            let diff = input.cursor.subtract( body.position )\r\n            let length = Math.max( diff.length(), 50 )\r\n            diff = diff.scale( power / length ** 3 )\r\n            body.velocity.x += diff.x * timeStep\r\n            body.velocity.y += diff.y * timeStep\r\n        }\r\n\r\n        // Reset bodies which are out of bounds.\r\n        let x = body.position.x\r\n        let width = canvas.width\r\n        let marigin = 80\r\n        if ( x < -marigin || x > width + marigin ) {\r\n            body.position.y = -200\r\n            body.position.x = width / 2\r\n            body.velocity.x = 0\r\n            body.velocity.y = 0\r\n            body.collider.onUpdatePosition()\r\n        }\r\n    }\r\n    engine.fixedUpdate()\r\n}\r\n\r\nfunction render() {\r\n    Drawing.context = c\r\n\r\n    c.fillStyle = offWhite\r\n    c.fillRect( 0, 0, canvas.width, canvas.height )\r\n\r\n    if ( !dontRender )\r\n        engine.renderToCanvas( c )\r\n\r\n    c.fillStyle = \"red\"; c.font = \"24px Impact\"\r\n    c.fillText( \"FPS: \" + clock.averageFPS.toFixed( 2 ), 2, 22 )\r\n    c.fillStyle = \"blue\"; c.font = \"24px Impact\"\r\n    c.fillText( \"Average penetration: \" + engine.averagePenetration().toFixed( 2 ), 2, 22 * 2 )\r\n}"]}
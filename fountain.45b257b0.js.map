{"version":3,"sources":["../math/math.ts","../Clock.ts","../math/AABB.ts","../collision/Broadphase.ts","../math/Vector.ts","../common.ts","../Input.ts","fountain.ts"],"names":[],"mappings":"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","file":"fountain.45b257b0.js","sourceRoot":"..\\src\\demos","sourcesContent":["import Vector from \"./Vector\"\r\n\r\nconst epsilon = 0.00001\r\n\r\nexport function equals( a: number, b: number ) {\r\n    return Math.abs( a - b ) < epsilon\r\n}\r\n\r\nexport function randomFloor( upperLimit: number ) {\r\n    return Math.floor( Math.random() * upperLimit )\r\n}\r\n\r\nexport function contains( min: number, max: number, x: number ) {\r\n    return x >= min && x <= max\r\n}\r\n\r\nexport function contains2D( pos: Vector, width: number, height: number, pt: Vector ) {\r\n    return contains( pos.x, pos.x + width, pt.x ) && contains( pos.y, pos.y + height, pt.y )\r\n}\r\n\r\nexport function clamp( min: number, max: number, x: number ) {\r\n    return ( x < min ) ? min : ( ( x > max ) ? max : x )\r\n}\r\n\r\nexport function threshold( x: number, cutoff: number ) {\r\n    return Math.abs( x ) < cutoff ? 0 : x\r\n}\r\n\r\nexport function lerp( start: number, end: number, alpha: number ) {\r\n    return ( end - start ) * alpha + start\r\n}\r\n\r\nexport function remap( min1: number, max1: number, min2: number, max2: number, x ) {\r\n    let alpha = ( x - min1 ) / ( max1 - min1 )\r\n    return lerp( min2, max2, alpha )\r\n}\r\n\r\nexport function modulus( quotient: number, divisor: number ) {\r\n    return ( ( quotient % divisor ) + divisor ) % divisor\r\n}","import { lerp } from \"./math/math\"\r\n\r\nexport default class Clock {\r\n    lastFrame: number\r\n    averageFPS: number\r\n    constructor() {\r\n        this.lastFrame = performance.now()\r\n        this.averageFPS = 0\r\n    }\r\n    nextFrame() {\r\n        let now = performance.now()\r\n        let dt = now - this.lastFrame\r\n        this.lastFrame = now\r\n\r\n        if ( dt != 0 ) {\r\n            let FPS = 1000 / dt\r\n            this.averageFPS = lerp( this.averageFPS, FPS, 0.04 )\r\n        }\r\n\r\n        return dt\r\n    }\r\n}","import { contains } from \"./math\"\r\nimport Vector from \"./Vector\"\r\n\r\nexport default class AABB {\r\n    minx: number\r\n    miny: number\r\n    maxx: number\r\n    maxy: number\r\n\r\n    constructor( minx: number, miny: number, maxx: number, maxy: number ) {\r\n        this.minx = minx\r\n        this.miny = miny\r\n        this.maxx = maxx\r\n        this.maxy = maxy\r\n    }\r\n\r\n    static fromDimensions( pos: Vector, dimensions: Vector ) {\r\n        return new AABB( pos.x, pos.y, pos.x + dimensions.x, pos.y + dimensions.y )\r\n    }\r\n\r\n    width() { return this.maxx - this.minx }\r\n    height() { return this.maxy - this.miny }\r\n\r\n    hull( a: AABB, b: AABB ) {\r\n        function min( x, y ) { return Math.min( x, y ) }\r\n        function max( x, y ) { return Math.max( x, y ) }\r\n        return new AABB(\r\n            min( a.minx, b.minx ),\r\n            min( a.miny, b.miny ),\r\n            max( a.maxx, b.maxx ),\r\n            max( a.maxy, b.maxy )\r\n        )\r\n    }\r\n\r\n    overlaps( other: AABB ) {\r\n        let a = this, b = other\r\n        return a.minx <= b.maxx && a.maxx >= b.minx &&\r\n            a.miny <= b.maxy && a.maxy >= b.miny\r\n    }\r\n\r\n    addPoint( p: Vector ) {\r\n        this.minx = Math.min( this.minx, p.x )\r\n        this.miny = Math.min( this.miny, p.y )\r\n        this.maxx = Math.max( this.maxx, p.x )\r\n        this.maxy = Math.max( this.maxy, p.y )\r\n    }\r\n\r\n    addAABB( other: AABB ) {\r\n        let a = this, b = other\r\n        a.minx = Math.min( a.minx, b.minx )\r\n        a.miny = Math.min( a.miny, b.miny )\r\n        a.maxx = Math.max( a.maxx, b.maxx )\r\n        a.maxy = Math.max( a.maxy, b.maxy )\r\n    }\r\n\r\n    static empty() {\r\n        return new AABB( Infinity, Infinity, -Infinity, -Infinity )\r\n    }\r\n\r\n    static polygonBounds( poly: Vector[] ) {\r\n        let result = AABB.empty()\r\n        for ( let p of poly )\r\n            result.addPoint( p )\r\n        return result\r\n    }\r\n\r\n    contains( p: Vector ) {\r\n        let { minx, miny, maxx, maxy } = this\r\n        return p.x >= minx && p.x <= maxx && p.y >= miny && p.y <= maxy\r\n    }\r\n}\r\n","import AABB from \"../math/AABB\"\r\nimport { clamp, contains, remap } from \"../math/math\"\r\nimport Vector from \"../math/Vector\"\r\n\r\n// If calculating bounds is slow, it should be cached on the provider because it is called 2-3 times per body here.\r\nexport interface IBroadphaseEntry { getBounds: () => AABB, id: number }\r\nexport default class Broadphase {\r\n    static findPairs<T extends IBroadphaseEntry>( bodies: T[], cellSize: number, callback: ( a: T, b: T ) => void ) {\r\n        let bounds = AABB.empty()\r\n        for ( let body of bodies )\r\n            bounds.addAABB( body.getBounds() )\r\n\r\n        let width = bounds.width()\r\n        let height = bounds.height()\r\n        let gridWidth = Math.ceil( width / cellSize )\r\n        let gridHeight = Math.ceil( height / cellSize )\r\n\r\n        const x_to_i = ( x: number ) => clamp( 0, gridWidth - 1, Math.floor( remap( bounds.minx, bounds.maxx, 0, gridWidth - 1, x ) ) )\r\n        const y_to_j = ( y: number ) => clamp( 0, gridHeight - 1, Math.floor( remap( bounds.miny, bounds.maxy, 0, gridHeight - 1, y ) ) )\r\n\r\n        type GridCell = T[]\r\n        const grid = new Map<number, GridCell>()\r\n        // const grid: GridCell[] = []\r\n        // for ( let i = 0; i < gridWidth * gridHeight; i++ )\r\n        //     grid.push( [] )\r\n\r\n        // Place bodies in grid.\r\n        for ( let body of bodies ) {\r\n            let bounds = body.getBounds()\r\n            let i1 = x_to_i( bounds.minx )\r\n            let i2 = x_to_i( bounds.maxx )\r\n            let j1 = y_to_j( bounds.miny )\r\n            let j2 = y_to_j( bounds.maxy )\r\n            for ( let i = i1; i <= i2; i++ ) {\r\n                for ( let j = j1; j <= j2; j++ ) {\r\n                    let cellIndex = i * gridHeight + j\r\n                    if ( !grid.has( cellIndex ) )\r\n                        grid.set( cellIndex, [] )\r\n                    grid.get( cellIndex )?.push( body )\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        let visitedPairs = new Set<number>()\r\n\r\n        for ( let gridCell of grid.values() ) {\r\n            for ( let iBodyA = 0; iBodyA < gridCell.length; iBodyA++ ) {\r\n                let bodyA = gridCell[ iBodyA ]\r\n                let boundsA = bodyA.getBounds()\r\n                for ( let iBodyB = iBodyA + 1; iBodyB < gridCell.length; iBodyB++ ) {\r\n                    let bodyB = gridCell[ iBodyB ]\r\n\r\n                    let boundsB = bodyB.getBounds()\r\n                    if ( !boundsA.overlaps( boundsB ) )\r\n                        continue\r\n\r\n                    // Check if pair has been visited.\r\n                    let minId = Math.min( bodyA.id, bodyB.id )\r\n                    let maxId = Math.max( bodyA.id, bodyB.id )\r\n                    let pairKey = ( maxId << 16 ) | minId\r\n                    if ( visitedPairs.has( pairKey ) ) continue\r\n                    visitedPairs.add( pairKey )\r\n\r\n                    callback( bodyA, bodyB )\r\n                }\r\n            }\r\n        }\r\n\r\n        // // Iterate over grid to generate pairs.\r\n        // for ( let i = 0; i < gridWidth; i++ ) {\r\n        //     for ( let j = 0; j < gridHeight; j++ ) {\r\n        //         let cellIndex = i * gridHeight + j\r\n        //         let gridCell = grid[ cellIndex ]\r\n        //         for ( let iBodyA = 0; iBodyA < gridCell.length; iBodyA++ ) {\r\n        //             let bodyA = gridCell[ iBodyA ]\r\n        //             let boundsA = bodyA.getBounds()\r\n        //             for ( let iBodyB = iBodyA + 1; iBodyB < gridCell.length; iBodyB++ ) {\r\n        //                 let bodyB = gridCell[ iBodyB ]\r\n\r\n        //                 let boundsB = bodyB.getBounds()\r\n        //                 if ( !boundsA.overlaps( boundsB ) )\r\n        //                     continue\r\n\r\n        //                 // Check if pair has been visited.\r\n        //                 let minId = Math.min( bodyA.id, bodyB.id )\r\n        //                 let maxId = Math.max( bodyA.id, bodyB.id )\r\n        //                 let pairKey = ( maxId << 16 ) | minId\r\n        //                 if ( visitedPairs.has( pairKey ) ) continue\r\n        //                 visitedPairs.add( pairKey )\r\n\r\n        //                 callback( bodyA, bodyB )\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // }\r\n    }\r\n}","import { clamp, equals } from \"./math\"\r\n\r\nexport default class Vector {\r\n    x: number\r\n    y: number\r\n    static zero = new Vector( 0, 0 )\r\n    static one = new Vector( 1, 1 )\r\n    static right = new Vector( 1, 0 )\r\n    static down = new Vector( 0, 1 )\r\n    constructor( x, y ) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n    length() { return Math.sqrt( this.x ** 2 + this.y ** 2 ) }\r\n    lengthSquared() { return this.x * this.x + this.y * this.y }\r\n    angle() { return Math.atan2( this.y, this.x ) }\r\n\r\n    equivalent( other: Vector ) { return equals( this.x, other.x ) && equals( this.y, other.y ) }\r\n\r\n    unit() { return this.scale( 1 / Math.max( this.length(), 1e-10 ) ) }\r\n    leftNormal() { return new Vector( -this.y, this.x ) }\r\n    rightNormal() { return new Vector( this.y, -this.x ) }\r\n    negate() { return new Vector( -this.x, -this.y ) }\r\n    half() { return new Vector( this.x * 0.5, this.y * 0.5 ) }\r\n    copy() { return new Vector( this.x, this.y ) }\r\n\r\n    floor( scale = 1 ) { return new Vector( Math.floor( this.x / scale ) * scale, Math.floor( this.y / scale ) * scale ) }\r\n\r\n    add( other: Vector ) { return new Vector( this.x + other.x, this.y + other.y ) }\r\n    addXY( x: number, y: number ) { return new Vector( this.x + x, this.y + y ) }\r\n    addX( x: number ) { return new Vector( this.x + x, this.y ) }\r\n    addY( y: number ) { return new Vector( this.x, this.y + y ) }\r\n    subtract( other: Vector ) { return new Vector( this.x - other.x, this.y - other.y ) }\r\n    dot( other: Vector ) { return this.x * other.x + this.y * other.y }\r\n    cross( other: Vector ) { return this.x * other.y - this.y * other.x }\r\n    crossZLeft( z: number ) { return new Vector( - this.y * z, this.x * z ) }\r\n    crossZRight( z: number ) { return new Vector( this.y * z, - this.x * z ) }\r\n    scale( scale: number ) { return new Vector( this.x * scale, this.y * scale ) }\r\n    stretch( x: number, y: number ) { return new Vector( this.x * x, this.y * y ) }\r\n    divide( divisor: number ) { return new Vector( this.x / divisor, this.y / divisor ) }\r\n    lerp( other: Vector, t: number ) { return this.scale( 1 - t ).add( other.scale( t ) ) }\r\n\r\n    clampAlongAxis( axis: Vector, min, max ) {\r\n        let projection = this.dot( axis )\r\n        let clampedProjection = clamp( min, max, projection )\r\n        let diff = clampedProjection - projection\r\n        return this.add( axis.scale( diff ) )\r\n    }\r\n\r\n    distance( other: Vector ) { return Math.sqrt( ( this.x - other.x ) ** 2 + ( this.y - other.y ) ** 2 ) }\r\n    distanceSq( other: Vector ) { return ( this.x - other.x ) ** 2 + ( this.y - other.y ) ** 2 }\r\n\r\n    rotated( angle: number ) {\r\n        return this.complexProduct( Vector.polar( angle, 1 ) )\r\n    }\r\n\r\n    isRightOf( other: Vector ) {\r\n        return this.cross( other ) > 0\r\n    }\r\n\r\n    normalOnSide( side: Vector ) {\r\n        if ( side.isRightOf( this ) )\r\n            return this.rightNormal()\r\n        return this.leftNormal()\r\n    }\r\n\r\n    complexProduct( other: Vector ) {\r\n        let x = this.x * other.x - this.y * other.y\r\n        let y = this.x * other.y + this.y * other.x\r\n        return new Vector( x, y )\r\n    }\r\n\r\n    complexQuotient( other: Vector ) {\r\n        let lengthSquared = other.lengthSquared()\r\n        let x = this.x * other.x + this.y * other.y\r\n        let y = this.y * other.x - this.x * other.y\r\n        return new Vector( x / lengthSquared, y / lengthSquared )\r\n    }\r\n\r\n    complexExponential() {\r\n        let magnitude = Math.exp( this.x )\r\n        return new Vector( magnitude * Math.cos( this.y ), magnitude * Math.sin( this.y ) )\r\n    }\r\n\r\n    projection( other: Vector ) {\r\n        return other.scale( other.dot( this ) / other.lengthSquared() )\r\n    }\r\n\r\n    projectToLine( normal: Vector, distance: number ) {\r\n        let heightAboveLine = this.dot( normal ) - distance\r\n        return this.subtract( normal.scale( heightAboveLine ) )\r\n    }\r\n\r\n    static polar( angle, length ) {\r\n        return new Vector( Math.cos( angle ) * length, Math.sin( angle ) * length )\r\n    }\r\n\r\n    // Allocation free operations for hotcode\r\n    set( x: number, y: number ) { this.x = x; this.y = y; return this }\r\n    hot_add( other: Vector, target: Vector ) { return target.set( this.x + other.x, this.y + other.y ) }\r\n    hot_subtract( other: Vector, target: Vector ) { return target.set( this.x - other.x, this.y - other.y ) }\r\n    hot_crossZLeft( z: number, target: Vector ) { return target.set( - this.y * z, this.x * z ) }\r\n    hot_crossZRight( z: number, target: Vector ) { return target.set( this.y * z, - this.x * z ) }\r\n    hot_scale( scale: number, target: Vector ) { return target.set( this.x * scale, this.y * scale ) }\r\n    hot_leftNormal( target: Vector ) { return target.set( -this.y, this.x ) }\r\n    hot_rightNormal( target: Vector ) { return target.set( this.y, -this.x ) }\r\n    hot_unit( target: Vector ) { let scale = 1 / this.length(); return target.set( this.x * scale, this.y * scale ) }\r\n}","import { modulus } from \"./math/math\"\r\nimport { SupportFunction } from \"./math/SupportFunctions\"\r\nimport Vector from \"./math/Vector\"\r\n\r\nexport const notQuiteInfiniteMass = 1e+32\r\n\r\nexport function sampleSupport( n, support: SupportFunction ) {\r\n    let result: Vector[] = []\r\n    for ( let i = 0; i < n; i++ ) {\r\n        let theta = Math.PI * 2 * i / n\r\n        result.push( support( Vector.polar( theta, 1 ) ) )\r\n    }\r\n    return result\r\n}\r\n\r\nexport function polygon( n, radius ) {\r\n    let result: Vector[] = []\r\n    for ( let i = 0; i < n; i++ )\r\n        result.push( new Vector(\r\n            Math.cos( Math.PI * 2 / n * i ) * radius,\r\n            Math.sin( Math.PI * 2 / n * i ) * radius\r\n        ) )\r\n    return result\r\n}\r\n\r\nexport function boxPolygon( width, height ) {\r\n    let rx = width / 2\r\n    let ry = height / 2\r\n    return [\r\n        new Vector( -rx, -ry ),\r\n        new Vector( rx, -ry ),\r\n        new Vector( rx, ry ),\r\n        new Vector( -rx, ry ),\r\n    ]\r\n}\r\n\r\nexport function initCanvas() {\r\n    let canvas = document.getElementById( \"mainCanvas\" ) as HTMLCanvasElement\r\n    updateCanvasResolution()\r\n    window.addEventListener( \"resize\", ev => updateCanvasResolution() )\r\n    function updateCanvasResolution() {\r\n        let rect = canvas.getBoundingClientRect()\r\n        canvas.width = rect.width\r\n        canvas.height = rect.height\r\n    }\r\n    return canvas\r\n}","import Vector from \"./math/Vector\"\r\n\r\nexport default class Input {\r\n    keys: Map<string, boolean>\r\n    mouse: Map<number, boolean>\r\n    cursor: Vector\r\n    constructor() {\r\n        this.keys = new Map()\r\n        this.mouse = new Map()\r\n        this.cursor = new Vector( 0, 0 )\r\n        this.watchCursor()\r\n        this.watchMouse()\r\n        this.watchKeys()\r\n    }\r\n    watchKeys() {\r\n        console.log( \"starting key watch\" )\r\n        window.addEventListener( \"keydown\", ( e ) => this.keys.set( e.key.toLowerCase(), true ) )\r\n        window.addEventListener( \"keyup\", ( e ) => this.keys.set( e.key.toLowerCase(), false ) )\r\n    }\r\n    watchMouse() {\r\n        console.log( \"starting mouse watch\" )\r\n        window.addEventListener( \"mousedown\", ( e ) => this.mouse.set( e.button, true ) )\r\n        window.addEventListener( \"mouseup\", ( e ) => this.mouse.set( e.button, false ) )\r\n    }\r\n    watchCursor() {\r\n        console.log( \"starting cursor watch\" )\r\n        window.addEventListener( \"mousemove\", ( e ) => this.cursor = new Vector( e.x, e.y ) )\r\n    }\r\n}","/* \r\n    This demo is redundant because the engine now supports circle and polygon colliders together.\r\n    It's still nice to keep this for comparison. Ideally further abstractions shouldn't\r\n    hurt the pure circle on circle performance and stability.\r\n*/\r\nimport Clock from \"../Clock\"\r\nimport Broadphase from \"../collision/Broadphase\"\r\nimport { initCanvas, notQuiteInfiniteMass } from \"../common\"\r\nimport Input from \"../Input\"\r\nimport AABB from \"../math/AABB\"\r\nimport { clamp } from \"../math/math\"\r\nimport Vector from \"../math/Vector\"\r\n\r\nclass Body {\r\n    pos: Vector\r\n    vel: Vector\r\n    radius: number\r\n    mass: number\r\n    color: string\r\n    id: number\r\n    isStatic: boolean = false\r\n    static idCounter = 0\r\n    constructor( args: { pos: Vector, radius: number, mass?: number, vel?: Vector, color?: string, isStatic?: boolean } ) {\r\n        this.pos = args.pos\r\n        this.radius = args.radius\r\n        this.vel = args.vel ?? new Vector( 0, 0 )\r\n        this.isStatic = args.isStatic ?? false\r\n        this.mass = this.isStatic ? 1e+32 : ( args.mass ?? this.radius ** 2 )\r\n        this.color = args.color ?? \"red\"\r\n        this.id = Body.idCounter++\r\n        // this.color = \"#\" + ( ( Math.random() * 16 ** 6 ) | 0 ).toString( 16 ).padStart( 6, \"0\" )\r\n    }\r\n    getBounds() {\r\n        return new AABB(\r\n            this.pos.x - this.radius, this.pos.y - this.radius,\r\n            this.pos.x + this.radius, this.pos.y + this.radius\r\n        )\r\n    }\r\n}\r\n\r\nlet canvas = initCanvas()\r\nlet c = canvas.getContext( \"2d\" ) as CanvasRenderingContext2D\r\nlet input = new Input()\r\nlet clock = new Clock()\r\nlet bodies: Body[] = []\r\nconst positionalDamping = 0.25\r\nconst positionalIterations = 7\r\nconst velocityIterations = 7\r\nconst restitution = 0.8\r\nconst gravity = 1000\r\nconst timeStep = 1 / 120\r\nconst updatesPerFrame = 1\r\nconst offscreenMargin = 60\r\nconst gridCellSize = 20\r\n\r\nconst colorPalette = [ \"#264653\", \"#2A9D8F\", \"#E9C46A\", \"#F4A261\", \"#E76F51\" ]\r\nconst staticCircleColor = \"#d1ccb6\"\r\n\r\nfor ( let i = 0; i < 1500; i++ ) {\r\n    let pos = new Vector(\r\n        Math.random() * canvas.width,\r\n        Math.random() * canvas.height\r\n    )\r\n    let vel = new Vector(\r\n        ( Math.random() - .5 ) * 1000,\r\n        ( Math.random() - .5 ) * 1000\r\n    )\r\n    // let radius = 12.5\r\n    let radius = ( Math.random() * 10 + 20 ) * .5\r\n    let color = colorPalette[ Math.random() * colorPalette.length | 0 ]\r\n    let body = new Body( { pos, radius, vel, color } )\r\n    bodies.push( body )\r\n}\r\nbodies.push( new Body( {\r\n    pos: new Vector( canvas.width / 2, canvas.height / 4 ),\r\n    radius: 100,\r\n    color: staticCircleColor,\r\n    isStatic: true\r\n} ) )\r\nbodies.push( new Body( {\r\n    pos: new Vector( canvas.width / 2 + 200, canvas.height / 2 ),\r\n    radius: 100,\r\n    color: staticCircleColor,\r\n    isStatic: true\r\n} ) )\r\nbodies.push( new Body( {\r\n    pos: new Vector( canvas.width / 2 - 200, canvas.height / 2 ),\r\n    radius: 100,\r\n    color: staticCircleColor,\r\n    isStatic: true\r\n} ) )\r\nbodies.push( new Body( {\r\n    pos: new Vector( canvas.width, canvas.height ),\r\n    radius: 100,\r\n    color: staticCircleColor,\r\n    isStatic: true\r\n} ) )\r\nbodies.push( new Body( {\r\n    pos: new Vector( 0, canvas.height ),\r\n    radius: 100,\r\n    color: staticCircleColor,\r\n    isStatic: true\r\n} ) )\r\n\r\nmainLoop()\r\nfunction mainLoop() {\r\n    clock.nextFrame()\r\n    render()\r\n    for ( let i = 0; i < updatesPerFrame; i++ )\r\n        update()\r\n    window.setTimeout( mainLoop, timeStep * updatesPerFrame )\r\n}\r\n\r\nfunction render() {\r\n    c.fillStyle = \"#ebe6d1\"\r\n    c.fillRect( 0, 0, canvas.width, canvas.height )\r\n\r\n    for ( let body of bodies ) {\r\n        let { x, y } = body.pos\r\n        c.beginPath()\r\n        c.arc( x, y, body.radius, 0, Math.PI * 2 )\r\n        c.fillStyle = body.color\r\n        c.fill()\r\n    }\r\n\r\n    c.fillStyle = \"red\"\r\n    c.font = \"24px Impact\"\r\n    c.fillText( clock.averageFPS.toFixed( 2 ), 0 + 2, 20 + 2 )\r\n}\r\n\r\nfunction update() {\r\n    for ( let body of bodies ) {\r\n        if ( !body.isStatic && body.pos.x > canvas.width + offscreenMargin || body.pos.x < -offscreenMargin ) {\r\n            body.vel.x = ( Math.random() - .5 ) * 100\r\n            body.vel.y = ( Math.random() - .25 ) * 100\r\n            body.pos.x = canvas.width / 2 + ( Math.random() - .5 ) * 500\r\n            body.pos.y = -20 //canvas.height / 8 + ( Math.random() - .5 ) * 500\r\n        }\r\n        if ( !body.isStatic ) {\r\n            let { pos, vel } = body\r\n            if ( !input.mouse.get( 2 ) )\r\n                vel.y += timeStep * gravity\r\n            if ( input.mouse.get( 0 ) ) {\r\n                let diff = input.cursor.subtract( pos )\r\n                let length = Math.max( diff.length(), 50 )\r\n                diff = diff.scale( -50000000 / length ** 3 )\r\n                vel.x += timeStep * diff.x\r\n                vel.y += timeStep * diff.y\r\n            }\r\n            pos.x += vel.x * timeStep\r\n            pos.y += vel.y * timeStep\r\n        }\r\n    }\r\n\r\n    let pairs = generateCollisions()\r\n    for ( let i = 0; i < velocityIterations; i++ )\r\n        solveVelocities( pairs )\r\n    for ( let i = 0; i < positionalIterations; i++ )\r\n        solvePositions( pairs )\r\n}\r\n\r\nfunction solvePositions( pairs: Collision[] ) {\r\n    for ( let pair of pairs ) {\r\n        let { bodyA, bodyB, normal, penetration } = pair\r\n\r\n        let _penetration = penetration()\r\n        if ( _penetration < 0 ) continue\r\n\r\n        let massA = bodyA?.mass ?? notQuiteInfiniteMass\r\n        let massB = bodyB?.mass ?? notQuiteInfiniteMass\r\n\r\n        let displacement = _penetration * positionalDamping\r\n        let massRatio = massB / massA\r\n        let displacementB = displacement / ( 1 + massRatio )\r\n        let displacementA = displacement - displacementB\r\n\r\n        if ( bodyA && !bodyA.isStatic ) {\r\n            bodyA.pos.x -= normal.x * displacementA\r\n            bodyA.pos.y -= normal.y * displacementA\r\n        }\r\n\r\n        if ( bodyB && !bodyB.isStatic ) {\r\n            bodyB.pos.x += normal.x * displacementB\r\n            bodyB.pos.y += normal.y * displacementB\r\n        }\r\n    }\r\n}\r\n\r\nfunction solveVelocities( pairs: Collision[] ) {\r\n    for ( let pair of pairs ) {\r\n        let { bodyA, bodyB, normal, penetration } = pair\r\n\r\n        let _penetration = penetration()\r\n        if ( _penetration < 0 ) continue\r\n\r\n        let massA = bodyA?.mass ?? notQuiteInfiniteMass\r\n        let massB = bodyB?.mass ?? notQuiteInfiniteMass\r\n        let velA = bodyA.vel ?? new Vector( 0, 0 )\r\n        let velB = bodyB?.vel ?? new Vector( 0, 0 )\r\n\r\n        // See impulse formula here https://www.randygaul.net/2013/03/27/game-physics-engine-part-1-impulse-resolution/\r\n        let combinedEffectiveMass = 1 / ( 1 / massA + 1 / massB )\r\n        let velBA = velB.subtract( velA )\r\n        let impulse = velBA.dot( normal ) * ( 1 + restitution ) * combinedEffectiveMass\r\n\r\n        if ( impulse > 0 ) continue\r\n\r\n        if ( bodyA && !bodyA.isStatic ) {\r\n            bodyA.vel.x += normal.x * impulse / massA\r\n            bodyA.vel.y += normal.y * impulse / massA\r\n        }\r\n\r\n        if ( bodyB && !bodyB.isStatic ) {\r\n            bodyB.vel.x -= normal.x * impulse / massB\r\n            bodyB.vel.y -= normal.y * impulse / massB\r\n        }\r\n    }\r\n}\r\n\r\ntype Collision = { bodyA: Body, bodyB?: Body, normal: Vector, penetration: () => number }\r\nfunction generateCollisions() {\r\n    const walls = [\r\n        // { normal: new Vector( 0, -1 ), distance: 0 },\r\n        { normal: new Vector( 0, 1 ), distance: canvas.height },\r\n        // { normal: new Vector( -1, 0 ), distance: 0 },\r\n        // { normal: new Vector( 1, 0 ), distance: canvas.width },\r\n    ]\r\n\r\n    let result: Collision[] = []\r\n\r\n    for ( let i = 0; i < bodies.length; i++ ) {\r\n        let body = bodies[ i ]\r\n        for ( let wall of walls ) {\r\n            let penetration = () => body.pos.dot( wall.normal ) - wall.distance + body.radius\r\n            if ( penetration() < 0 ) continue\r\n            result.push( {\r\n                bodyA: body,\r\n                normal: wall.normal,\r\n                penetration\r\n            } )\r\n        }\r\n    }\r\n\r\n    Broadphase.findPairs( bodies, gridCellSize, ( bodyA, bodyB ) => {\r\n        let penetration = () => bodyA.radius + bodyB.radius - bodyA.pos.distance( bodyB.pos )\r\n        if ( penetration() < 0 ) return\r\n        let normal = bodyB.pos.subtract( bodyA.pos ).unit()\r\n        result.push( { bodyA, bodyB, normal, penetration } )\r\n    } )\r\n\r\n    return result\r\n}"]}